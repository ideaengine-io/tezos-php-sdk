<?php
/**
 * InlineResponse2009PeerMetadataPrevalidatorResults
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  IdeaEngine\TezosSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Tezos RPC
 *
 * Tezos client RPC API.
 *
 * The version of the OpenAPI document: 11.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace IdeaEngine\TezosSDK\Model;

use \ArrayAccess;
use \IdeaEngine\TezosSDK\ObjectSerializer;

/**
 * InlineResponse2009PeerMetadataPrevalidatorResults Class Doc Comment
 *
 * @category Class
 * @package  IdeaEngine\TezosSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse2009PeerMetadataPrevalidatorResults implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_9_peer_metadata_prevalidator_results';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cannot_download' => 'string',
        'cannot_parse' => 'string',
        'refused_by_prefilter' => 'string',
        'refused_by_postfilter' => 'string',
        'applied' => 'string',
        'branch_delayed' => 'string',
        'branch_refused' => 'string',
        'refused' => 'string',
        'duplicate' => 'string',
        'outdated' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cannot_download' => null,
        'cannot_parse' => null,
        'refused_by_prefilter' => null,
        'refused_by_postfilter' => null,
        'applied' => null,
        'branch_delayed' => null,
        'branch_refused' => null,
        'refused' => null,
        'duplicate' => null,
        'outdated' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cannot_download' => 'cannot_download',
        'cannot_parse' => 'cannot_parse',
        'refused_by_prefilter' => 'refused_by_prefilter',
        'refused_by_postfilter' => 'refused_by_postfilter',
        'applied' => 'applied',
        'branch_delayed' => 'branch_delayed',
        'branch_refused' => 'branch_refused',
        'refused' => 'refused',
        'duplicate' => 'duplicate',
        'outdated' => 'outdated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cannot_download' => 'setCannotDownload',
        'cannot_parse' => 'setCannotParse',
        'refused_by_prefilter' => 'setRefusedByPrefilter',
        'refused_by_postfilter' => 'setRefusedByPostfilter',
        'applied' => 'setApplied',
        'branch_delayed' => 'setBranchDelayed',
        'branch_refused' => 'setBranchRefused',
        'refused' => 'setRefused',
        'duplicate' => 'setDuplicate',
        'outdated' => 'setOutdated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cannot_download' => 'getCannotDownload',
        'cannot_parse' => 'getCannotParse',
        'refused_by_prefilter' => 'getRefusedByPrefilter',
        'refused_by_postfilter' => 'getRefusedByPostfilter',
        'applied' => 'getApplied',
        'branch_delayed' => 'getBranchDelayed',
        'branch_refused' => 'getBranchRefused',
        'refused' => 'getRefused',
        'duplicate' => 'getDuplicate',
        'outdated' => 'getOutdated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cannot_download'] = $data['cannot_download'] ?? null;
        $this->container['cannot_parse'] = $data['cannot_parse'] ?? null;
        $this->container['refused_by_prefilter'] = $data['refused_by_prefilter'] ?? null;
        $this->container['refused_by_postfilter'] = $data['refused_by_postfilter'] ?? null;
        $this->container['applied'] = $data['applied'] ?? null;
        $this->container['branch_delayed'] = $data['branch_delayed'] ?? null;
        $this->container['branch_refused'] = $data['branch_refused'] ?? null;
        $this->container['refused'] = $data['refused'] ?? null;
        $this->container['duplicate'] = $data['duplicate'] ?? null;
        $this->container['outdated'] = $data['outdated'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cannot_download'] === null) {
            $invalidProperties[] = "'cannot_download' can't be null";
        }
        if ($this->container['cannot_parse'] === null) {
            $invalidProperties[] = "'cannot_parse' can't be null";
        }
        if ($this->container['refused_by_prefilter'] === null) {
            $invalidProperties[] = "'refused_by_prefilter' can't be null";
        }
        if ($this->container['refused_by_postfilter'] === null) {
            $invalidProperties[] = "'refused_by_postfilter' can't be null";
        }
        if ($this->container['applied'] === null) {
            $invalidProperties[] = "'applied' can't be null";
        }
        if ($this->container['branch_delayed'] === null) {
            $invalidProperties[] = "'branch_delayed' can't be null";
        }
        if ($this->container['branch_refused'] === null) {
            $invalidProperties[] = "'branch_refused' can't be null";
        }
        if ($this->container['refused'] === null) {
            $invalidProperties[] = "'refused' can't be null";
        }
        if ($this->container['duplicate'] === null) {
            $invalidProperties[] = "'duplicate' can't be null";
        }
        if ($this->container['outdated'] === null) {
            $invalidProperties[] = "'outdated' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cannot_download
     *
     * @return string
     */
    public function getCannotDownload()
    {
        return $this->container['cannot_download'];
    }

    /**
     * Sets cannot_download
     *
     * @param string $cannot_download Decimal representation of a big number
     *
     * @return self
     */
    public function setCannotDownload($cannot_download)
    {
        $this->container['cannot_download'] = $cannot_download;

        return $this;
    }

    /**
     * Gets cannot_parse
     *
     * @return string
     */
    public function getCannotParse()
    {
        return $this->container['cannot_parse'];
    }

    /**
     * Sets cannot_parse
     *
     * @param string $cannot_parse Decimal representation of a big number
     *
     * @return self
     */
    public function setCannotParse($cannot_parse)
    {
        $this->container['cannot_parse'] = $cannot_parse;

        return $this;
    }

    /**
     * Gets refused_by_prefilter
     *
     * @return string
     */
    public function getRefusedByPrefilter()
    {
        return $this->container['refused_by_prefilter'];
    }

    /**
     * Sets refused_by_prefilter
     *
     * @param string $refused_by_prefilter Decimal representation of a big number
     *
     * @return self
     */
    public function setRefusedByPrefilter($refused_by_prefilter)
    {
        $this->container['refused_by_prefilter'] = $refused_by_prefilter;

        return $this;
    }

    /**
     * Gets refused_by_postfilter
     *
     * @return string
     */
    public function getRefusedByPostfilter()
    {
        return $this->container['refused_by_postfilter'];
    }

    /**
     * Sets refused_by_postfilter
     *
     * @param string $refused_by_postfilter Decimal representation of a big number
     *
     * @return self
     */
    public function setRefusedByPostfilter($refused_by_postfilter)
    {
        $this->container['refused_by_postfilter'] = $refused_by_postfilter;

        return $this;
    }

    /**
     * Gets applied
     *
     * @return string
     */
    public function getApplied()
    {
        return $this->container['applied'];
    }

    /**
     * Sets applied
     *
     * @param string $applied Decimal representation of a big number
     *
     * @return self
     */
    public function setApplied($applied)
    {
        $this->container['applied'] = $applied;

        return $this;
    }

    /**
     * Gets branch_delayed
     *
     * @return string
     */
    public function getBranchDelayed()
    {
        return $this->container['branch_delayed'];
    }

    /**
     * Sets branch_delayed
     *
     * @param string $branch_delayed Decimal representation of a big number
     *
     * @return self
     */
    public function setBranchDelayed($branch_delayed)
    {
        $this->container['branch_delayed'] = $branch_delayed;

        return $this;
    }

    /**
     * Gets branch_refused
     *
     * @return string
     */
    public function getBranchRefused()
    {
        return $this->container['branch_refused'];
    }

    /**
     * Sets branch_refused
     *
     * @param string $branch_refused Decimal representation of a big number
     *
     * @return self
     */
    public function setBranchRefused($branch_refused)
    {
        $this->container['branch_refused'] = $branch_refused;

        return $this;
    }

    /**
     * Gets refused
     *
     * @return string
     */
    public function getRefused()
    {
        return $this->container['refused'];
    }

    /**
     * Sets refused
     *
     * @param string $refused Decimal representation of a big number
     *
     * @return self
     */
    public function setRefused($refused)
    {
        $this->container['refused'] = $refused;

        return $this;
    }

    /**
     * Gets duplicate
     *
     * @return string
     */
    public function getDuplicate()
    {
        return $this->container['duplicate'];
    }

    /**
     * Sets duplicate
     *
     * @param string $duplicate Decimal representation of a big number
     *
     * @return self
     */
    public function setDuplicate($duplicate)
    {
        $this->container['duplicate'] = $duplicate;

        return $this;
    }

    /**
     * Gets outdated
     *
     * @return string
     */
    public function getOutdated()
    {
        return $this->container['outdated'];
    }

    /**
     * Sets outdated
     *
     * @param string $outdated Decimal representation of a big number
     *
     * @return self
     */
    public function setOutdated($outdated)
    {
        $this->container['outdated'] = $outdated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


