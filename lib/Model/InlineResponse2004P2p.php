<?php
/**
 * InlineResponse2004P2p
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  IdeaEngine\TezosSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Tezos RPC
 *
 * Tezos client RPC API.
 *
 * The version of the OpenAPI document: 11.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace IdeaEngine\TezosSDK\Model;

use \ArrayAccess;
use \IdeaEngine\TezosSDK\ObjectSerializer;

/**
 * InlineResponse2004P2p Class Doc Comment
 *
 * @category Class
 * @description Configuration of network parameters
 * @package  IdeaEngine\TezosSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse2004P2p implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_4_p2p';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'expected_proof_of_work' => 'int',
        'bootstrap_peers' => '\IdeaEngine\TezosSDK\Model\Unistring[]',
        'listen_addr' => 'OneOfUnistring',
        'discovery_addr' => 'OneOfAnyType',
        'private_mode' => 'bool',
        'limits' => '\IdeaEngine\TezosSDK\Model\InlineResponse2004P2pLimits',
        'disable_mempool' => 'bool',
        'enable_testchain' => 'bool',
        'greylisting_config' => '\IdeaEngine\TezosSDK\Model\InlineResponse2004P2pGreylistingConfig'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'expected_proof_of_work' => null,
        'bootstrap_peers' => null,
        'listen_addr' => null,
        'discovery_addr' => null,
        'private_mode' => null,
        'limits' => null,
        'disable_mempool' => null,
        'enable_testchain' => null,
        'greylisting_config' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'expected_proof_of_work' => 'expected-proof-of-work',
        'bootstrap_peers' => 'bootstrap-peers',
        'listen_addr' => 'listen-addr',
        'discovery_addr' => 'discovery-addr',
        'private_mode' => 'private-mode',
        'limits' => 'limits',
        'disable_mempool' => 'disable_mempool',
        'enable_testchain' => 'enable_testchain',
        'greylisting_config' => 'greylisting_config'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'expected_proof_of_work' => 'setExpectedProofOfWork',
        'bootstrap_peers' => 'setBootstrapPeers',
        'listen_addr' => 'setListenAddr',
        'discovery_addr' => 'setDiscoveryAddr',
        'private_mode' => 'setPrivateMode',
        'limits' => 'setLimits',
        'disable_mempool' => 'setDisableMempool',
        'enable_testchain' => 'setEnableTestchain',
        'greylisting_config' => 'setGreylistingConfig'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'expected_proof_of_work' => 'getExpectedProofOfWork',
        'bootstrap_peers' => 'getBootstrapPeers',
        'listen_addr' => 'getListenAddr',
        'discovery_addr' => 'getDiscoveryAddr',
        'private_mode' => 'getPrivateMode',
        'limits' => 'getLimits',
        'disable_mempool' => 'getDisableMempool',
        'enable_testchain' => 'getEnableTestchain',
        'greylisting_config' => 'getGreylistingConfig'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['expected_proof_of_work'] = $data['expected_proof_of_work'] ?? null;
        $this->container['bootstrap_peers'] = $data['bootstrap_peers'] ?? null;
        $this->container['listen_addr'] = $data['listen_addr'] ?? null;
        $this->container['discovery_addr'] = $data['discovery_addr'] ?? null;
        $this->container['private_mode'] = $data['private_mode'] ?? null;
        $this->container['limits'] = $data['limits'] ?? null;
        $this->container['disable_mempool'] = $data['disable_mempool'] ?? null;
        $this->container['enable_testchain'] = $data['enable_testchain'] ?? null;
        $this->container['greylisting_config'] = $data['greylisting_config'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets expected_proof_of_work
     *
     * @return int|null
     */
    public function getExpectedProofOfWork()
    {
        return $this->container['expected_proof_of_work'];
    }

    /**
     * Sets expected_proof_of_work
     *
     * @param int|null $expected_proof_of_work Floating point number between 0 and 256 that represents a difficulty, 24 signifies for example that at least 24 leading zeroes are expected in the hash.
     *
     * @return self
     */
    public function setExpectedProofOfWork($expected_proof_of_work)
    {
        $this->container['expected_proof_of_work'] = $expected_proof_of_work;

        return $this;
    }

    /**
     * Gets bootstrap_peers
     *
     * @return \IdeaEngine\TezosSDK\Model\Unistring[]|null
     */
    public function getBootstrapPeers()
    {
        return $this->container['bootstrap_peers'];
    }

    /**
     * Sets bootstrap_peers
     *
     * @param \IdeaEngine\TezosSDK\Model\Unistring[]|null $bootstrap_peers List of hosts. Tezos can connect to both IPv6 and IPv4 hosts. If the port is not specified, default port 9732 will be assumed.
     *
     * @return self
     */
    public function setBootstrapPeers($bootstrap_peers)
    {
        $this->container['bootstrap_peers'] = $bootstrap_peers;

        return $this;
    }

    /**
     * Gets listen_addr
     *
     * @return OneOfUnistring|null
     */
    public function getListenAddr()
    {
        return $this->container['listen_addr'];
    }

    /**
     * Sets listen_addr
     *
     * @param OneOfUnistring|null $listen_addr Host to listen to. If the port is not specified, the default port 9732 will be assumed.
     *
     * @return self
     */
    public function setListenAddr($listen_addr)
    {
        $this->container['listen_addr'] = $listen_addr;

        return $this;
    }

    /**
     * Gets discovery_addr
     *
     * @return OneOfAnyType|null
     */
    public function getDiscoveryAddr()
    {
        return $this->container['discovery_addr'];
    }

    /**
     * Sets discovery_addr
     *
     * @param OneOfAnyType|null $discovery_addr Host for local peer discovery. If the port is not specified, the default port 10732 will be assumed.
     *
     * @return self
     */
    public function setDiscoveryAddr($discovery_addr)
    {
        $this->container['discovery_addr'] = $discovery_addr;

        return $this;
    }

    /**
     * Gets private_mode
     *
     * @return bool|null
     */
    public function getPrivateMode()
    {
        return $this->container['private_mode'];
    }

    /**
     * Sets private_mode
     *
     * @param bool|null $private_mode Specify if the node is in private mode or not. A node in private mode rejects incoming connections from untrusted peers and only opens outgoing connections to peers listed in 'bootstrap-peers' or provided with '--peer' option. Moreover, these peers will keep the identity and the address of the private node secret.
     *
     * @return self
     */
    public function setPrivateMode($private_mode)
    {
        $this->container['private_mode'] = $private_mode;

        return $this;
    }

    /**
     * Gets limits
     *
     * @return \IdeaEngine\TezosSDK\Model\InlineResponse2004P2pLimits|null
     */
    public function getLimits()
    {
        return $this->container['limits'];
    }

    /**
     * Sets limits
     *
     * @param \IdeaEngine\TezosSDK\Model\InlineResponse2004P2pLimits|null $limits limits
     *
     * @return self
     */
    public function setLimits($limits)
    {
        $this->container['limits'] = $limits;

        return $this;
    }

    /**
     * Gets disable_mempool
     *
     * @return bool|null
     */
    public function getDisableMempool()
    {
        return $this->container['disable_mempool'];
    }

    /**
     * Sets disable_mempool
     *
     * @param bool|null $disable_mempool If set to [true], the node will not participate in the propagation of pending operations (mempool). Default value is [false]. It can be used to decrease the memory and computation footprints of the node.
     *
     * @return self
     */
    public function setDisableMempool($disable_mempool)
    {
        $this->container['disable_mempool'] = $disable_mempool;

        return $this;
    }

    /**
     * Gets enable_testchain
     *
     * @return bool|null
     */
    public function getEnableTestchain()
    {
        return $this->container['enable_testchain'];
    }

    /**
     * Sets enable_testchain
     *
     * @param bool|null $enable_testchain If set to [true], the node will spawn a testchain during the protocol's testing voting period. Default value is [false]. It is disabled to decrease the node storage usage and computation by dropping the validation of the test network blocks.
     *
     * @return self
     */
    public function setEnableTestchain($enable_testchain)
    {
        $this->container['enable_testchain'] = $enable_testchain;

        return $this;
    }

    /**
     * Gets greylisting_config
     *
     * @return \IdeaEngine\TezosSDK\Model\InlineResponse2004P2pGreylistingConfig|null
     */
    public function getGreylistingConfig()
    {
        return $this->container['greylisting_config'];
    }

    /**
     * Sets greylisting_config
     *
     * @param \IdeaEngine\TezosSDK\Model\InlineResponse2004P2pGreylistingConfig|null $greylisting_config greylisting_config
     *
     * @return self
     */
    public function setGreylistingConfig($greylisting_config)
    {
        $this->container['greylisting_config'] = $greylisting_config;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


