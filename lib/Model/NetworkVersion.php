<?php
/**
 * NetworkVersion
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  IdeaEngine\TezosSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Tezos RPC
 *
 * Tezos client RPC API.
 *
 * The version of the OpenAPI document: 11.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace IdeaEngine\TezosSDK\Model;

use \ArrayAccess;
use \IdeaEngine\TezosSDK\ObjectSerializer;

/**
 * NetworkVersion Class Doc Comment
 *
 * @category Class
 * @description A version number for the network protocol (includes distributed DB version and p2p version)
 * @package  IdeaEngine\TezosSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class NetworkVersion implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'network_version';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'chain_name' => '\IdeaEngine\TezosSDK\Model\DistributedDbVersionName',
        'distributed_db_version' => 'int',
        'p2p_version' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'chain_name' => null,
        'distributed_db_version' => null,
        'p2p_version' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'chain_name' => 'chain_name',
        'distributed_db_version' => 'distributed_db_version',
        'p2p_version' => 'p2p_version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'chain_name' => 'setChainName',
        'distributed_db_version' => 'setDistributedDbVersion',
        'p2p_version' => 'setP2pVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'chain_name' => 'getChainName',
        'distributed_db_version' => 'getDistributedDbVersion',
        'p2p_version' => 'getP2pVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['chain_name'] = $data['chain_name'] ?? null;
        $this->container['distributed_db_version'] = $data['distributed_db_version'] ?? null;
        $this->container['p2p_version'] = $data['p2p_version'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['chain_name'] === null) {
            $invalidProperties[] = "'chain_name' can't be null";
        }
        if ($this->container['distributed_db_version'] === null) {
            $invalidProperties[] = "'distributed_db_version' can't be null";
        }
        if (($this->container['distributed_db_version'] > 65535)) {
            $invalidProperties[] = "invalid value for 'distributed_db_version', must be smaller than or equal to 65535.";
        }

        if (($this->container['distributed_db_version'] < 0)) {
            $invalidProperties[] = "invalid value for 'distributed_db_version', must be bigger than or equal to 0.";
        }

        if ($this->container['p2p_version'] === null) {
            $invalidProperties[] = "'p2p_version' can't be null";
        }
        if (($this->container['p2p_version'] > 65535)) {
            $invalidProperties[] = "invalid value for 'p2p_version', must be smaller than or equal to 65535.";
        }

        if (($this->container['p2p_version'] < 0)) {
            $invalidProperties[] = "invalid value for 'p2p_version', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets chain_name
     *
     * @return \IdeaEngine\TezosSDK\Model\DistributedDbVersionName
     */
    public function getChainName()
    {
        return $this->container['chain_name'];
    }

    /**
     * Sets chain_name
     *
     * @param \IdeaEngine\TezosSDK\Model\DistributedDbVersionName $chain_name chain_name
     *
     * @return self
     */
    public function setChainName($chain_name)
    {
        $this->container['chain_name'] = $chain_name;

        return $this;
    }

    /**
     * Gets distributed_db_version
     *
     * @return int
     */
    public function getDistributedDbVersion()
    {
        return $this->container['distributed_db_version'];
    }

    /**
     * Sets distributed_db_version
     *
     * @param int $distributed_db_version A version number for the distributed DB protocol
     *
     * @return self
     */
    public function setDistributedDbVersion($distributed_db_version)
    {

        if (($distributed_db_version > 65535)) {
            throw new \InvalidArgumentException('invalid value for $distributed_db_version when calling NetworkVersion., must be smaller than or equal to 65535.');
        }
        if (($distributed_db_version < 0)) {
            throw new \InvalidArgumentException('invalid value for $distributed_db_version when calling NetworkVersion., must be bigger than or equal to 0.');
        }

        $this->container['distributed_db_version'] = $distributed_db_version;

        return $this;
    }

    /**
     * Gets p2p_version
     *
     * @return int
     */
    public function getP2pVersion()
    {
        return $this->container['p2p_version'];
    }

    /**
     * Sets p2p_version
     *
     * @param int $p2p_version A version number for the p2p layer.
     *
     * @return self
     */
    public function setP2pVersion($p2p_version)
    {

        if (($p2p_version > 65535)) {
            throw new \InvalidArgumentException('invalid value for $p2p_version when calling NetworkVersion., must be smaller than or equal to 65535.');
        }
        if (($p2p_version < 0)) {
            throw new \InvalidArgumentException('invalid value for $p2p_version when calling NetworkVersion., must be bigger than or equal to 0.');
        }

        $this->container['p2p_version'] = $p2p_version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


