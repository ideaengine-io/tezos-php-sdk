<?php
/**
 * InlineResponse2004P2pLimits
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  IdeaEngine\TezosSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Tezos RPC
 *
 * Tezos client RPC API.
 *
 * The version of the OpenAPI document: 11.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace IdeaEngine\TezosSDK\Model;

use \ArrayAccess;
use \IdeaEngine\TezosSDK\ObjectSerializer;

/**
 * InlineResponse2004P2pLimits Class Doc Comment
 *
 * @category Class
 * @description Network limits
 * @package  IdeaEngine\TezosSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse2004P2pLimits implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_4_p2p_limits';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'connection_timeout' => 'OneOfInteger',
        'authentication_timeout' => 'OneOfInteger',
        'min_connections' => 'int',
        'expected_connections' => 'int',
        'max_connections' => 'int',
        'backlog' => 'int',
        'max_incoming_connections' => 'int',
        'max_download_speed' => 'int',
        'max_upload_speed' => 'int',
        'swap_linger' => 'int',
        'binary_chunks_size' => 'int',
        'read_buffer_size' => 'int',
        'read_queue_size' => 'int',
        'write_queue_size' => 'int',
        'incoming_app_message_queue_size' => 'int',
        'incoming_message_queue_size' => 'int',
        'outgoing_message_queue_size' => 'int',
        'max_known_points' => 'OneOfIntegerInteger[]',
        'max_known_peer_ids' => 'OneOfIntegerInteger[]',
        'peer_greylist_size' => 'int',
        'ip_greylist_size_in_kilobytes' => 'int',
        'ip_greylist_cleanup_delay' => 'OneOfInteger',
        'greylist_timeout' => 'OneOfInteger',
        'maintenance_idle_time' => 'OneOfInteger'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'connection_timeout' => null,
        'authentication_timeout' => null,
        'min_connections' => null,
        'expected_connections' => null,
        'max_connections' => null,
        'backlog' => null,
        'max_incoming_connections' => null,
        'max_download_speed' => null,
        'max_upload_speed' => null,
        'swap_linger' => null,
        'binary_chunks_size' => null,
        'read_buffer_size' => null,
        'read_queue_size' => null,
        'write_queue_size' => null,
        'incoming_app_message_queue_size' => null,
        'incoming_message_queue_size' => null,
        'outgoing_message_queue_size' => null,
        'max_known_points' => null,
        'max_known_peer_ids' => null,
        'peer_greylist_size' => null,
        'ip_greylist_size_in_kilobytes' => null,
        'ip_greylist_cleanup_delay' => null,
        'greylist_timeout' => null,
        'maintenance_idle_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'connection_timeout' => 'connection-timeout',
        'authentication_timeout' => 'authentication-timeout',
        'min_connections' => 'min-connections',
        'expected_connections' => 'expected-connections',
        'max_connections' => 'max-connections',
        'backlog' => 'backlog',
        'max_incoming_connections' => 'max-incoming-connections',
        'max_download_speed' => 'max-download-speed',
        'max_upload_speed' => 'max-upload-speed',
        'swap_linger' => 'swap-linger',
        'binary_chunks_size' => 'binary-chunks-size',
        'read_buffer_size' => 'read-buffer-size',
        'read_queue_size' => 'read-queue-size',
        'write_queue_size' => 'write-queue-size',
        'incoming_app_message_queue_size' => 'incoming-app-message-queue-size',
        'incoming_message_queue_size' => 'incoming-message-queue-size',
        'outgoing_message_queue_size' => 'outgoing-message-queue-size',
        'max_known_points' => 'max_known_points',
        'max_known_peer_ids' => 'max_known_peer_ids',
        'peer_greylist_size' => 'peer_greylist_size',
        'ip_greylist_size_in_kilobytes' => 'ip_greylist_size_in_kilobytes',
        'ip_greylist_cleanup_delay' => 'ip_greylist_cleanup_delay',
        'greylist_timeout' => 'greylist-timeout',
        'maintenance_idle_time' => 'maintenance-idle-time'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'connection_timeout' => 'setConnectionTimeout',
        'authentication_timeout' => 'setAuthenticationTimeout',
        'min_connections' => 'setMinConnections',
        'expected_connections' => 'setExpectedConnections',
        'max_connections' => 'setMaxConnections',
        'backlog' => 'setBacklog',
        'max_incoming_connections' => 'setMaxIncomingConnections',
        'max_download_speed' => 'setMaxDownloadSpeed',
        'max_upload_speed' => 'setMaxUploadSpeed',
        'swap_linger' => 'setSwapLinger',
        'binary_chunks_size' => 'setBinaryChunksSize',
        'read_buffer_size' => 'setReadBufferSize',
        'read_queue_size' => 'setReadQueueSize',
        'write_queue_size' => 'setWriteQueueSize',
        'incoming_app_message_queue_size' => 'setIncomingAppMessageQueueSize',
        'incoming_message_queue_size' => 'setIncomingMessageQueueSize',
        'outgoing_message_queue_size' => 'setOutgoingMessageQueueSize',
        'max_known_points' => 'setMaxKnownPoints',
        'max_known_peer_ids' => 'setMaxKnownPeerIds',
        'peer_greylist_size' => 'setPeerGreylistSize',
        'ip_greylist_size_in_kilobytes' => 'setIpGreylistSizeInKilobytes',
        'ip_greylist_cleanup_delay' => 'setIpGreylistCleanupDelay',
        'greylist_timeout' => 'setGreylistTimeout',
        'maintenance_idle_time' => 'setMaintenanceIdleTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'connection_timeout' => 'getConnectionTimeout',
        'authentication_timeout' => 'getAuthenticationTimeout',
        'min_connections' => 'getMinConnections',
        'expected_connections' => 'getExpectedConnections',
        'max_connections' => 'getMaxConnections',
        'backlog' => 'getBacklog',
        'max_incoming_connections' => 'getMaxIncomingConnections',
        'max_download_speed' => 'getMaxDownloadSpeed',
        'max_upload_speed' => 'getMaxUploadSpeed',
        'swap_linger' => 'getSwapLinger',
        'binary_chunks_size' => 'getBinaryChunksSize',
        'read_buffer_size' => 'getReadBufferSize',
        'read_queue_size' => 'getReadQueueSize',
        'write_queue_size' => 'getWriteQueueSize',
        'incoming_app_message_queue_size' => 'getIncomingAppMessageQueueSize',
        'incoming_message_queue_size' => 'getIncomingMessageQueueSize',
        'outgoing_message_queue_size' => 'getOutgoingMessageQueueSize',
        'max_known_points' => 'getMaxKnownPoints',
        'max_known_peer_ids' => 'getMaxKnownPeerIds',
        'peer_greylist_size' => 'getPeerGreylistSize',
        'ip_greylist_size_in_kilobytes' => 'getIpGreylistSizeInKilobytes',
        'ip_greylist_cleanup_delay' => 'getIpGreylistCleanupDelay',
        'greylist_timeout' => 'getGreylistTimeout',
        'maintenance_idle_time' => 'getMaintenanceIdleTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['connection_timeout'] = $data['connection_timeout'] ?? null;
        $this->container['authentication_timeout'] = $data['authentication_timeout'] ?? null;
        $this->container['min_connections'] = $data['min_connections'] ?? null;
        $this->container['expected_connections'] = $data['expected_connections'] ?? null;
        $this->container['max_connections'] = $data['max_connections'] ?? null;
        $this->container['backlog'] = $data['backlog'] ?? null;
        $this->container['max_incoming_connections'] = $data['max_incoming_connections'] ?? null;
        $this->container['max_download_speed'] = $data['max_download_speed'] ?? null;
        $this->container['max_upload_speed'] = $data['max_upload_speed'] ?? null;
        $this->container['swap_linger'] = $data['swap_linger'] ?? null;
        $this->container['binary_chunks_size'] = $data['binary_chunks_size'] ?? null;
        $this->container['read_buffer_size'] = $data['read_buffer_size'] ?? null;
        $this->container['read_queue_size'] = $data['read_queue_size'] ?? null;
        $this->container['write_queue_size'] = $data['write_queue_size'] ?? null;
        $this->container['incoming_app_message_queue_size'] = $data['incoming_app_message_queue_size'] ?? null;
        $this->container['incoming_message_queue_size'] = $data['incoming_message_queue_size'] ?? null;
        $this->container['outgoing_message_queue_size'] = $data['outgoing_message_queue_size'] ?? null;
        $this->container['max_known_points'] = $data['max_known_points'] ?? null;
        $this->container['max_known_peer_ids'] = $data['max_known_peer_ids'] ?? null;
        $this->container['peer_greylist_size'] = $data['peer_greylist_size'] ?? null;
        $this->container['ip_greylist_size_in_kilobytes'] = $data['ip_greylist_size_in_kilobytes'] ?? null;
        $this->container['ip_greylist_cleanup_delay'] = $data['ip_greylist_cleanup_delay'] ?? null;
        $this->container['greylist_timeout'] = $data['greylist_timeout'] ?? null;
        $this->container['maintenance_idle_time'] = $data['maintenance_idle_time'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['min_connections']) && ($this->container['min_connections'] > 65535)) {
            $invalidProperties[] = "invalid value for 'min_connections', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['min_connections']) && ($this->container['min_connections'] < 0)) {
            $invalidProperties[] = "invalid value for 'min_connections', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['expected_connections']) && ($this->container['expected_connections'] > 65535)) {
            $invalidProperties[] = "invalid value for 'expected_connections', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['expected_connections']) && ($this->container['expected_connections'] < 0)) {
            $invalidProperties[] = "invalid value for 'expected_connections', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['max_connections']) && ($this->container['max_connections'] > 65535)) {
            $invalidProperties[] = "invalid value for 'max_connections', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['max_connections']) && ($this->container['max_connections'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_connections', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['backlog']) && ($this->container['backlog'] > 255)) {
            $invalidProperties[] = "invalid value for 'backlog', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['backlog']) && ($this->container['backlog'] < 0)) {
            $invalidProperties[] = "invalid value for 'backlog', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['max_incoming_connections']) && ($this->container['max_incoming_connections'] > 255)) {
            $invalidProperties[] = "invalid value for 'max_incoming_connections', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['max_incoming_connections']) && ($this->container['max_incoming_connections'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_incoming_connections', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['max_download_speed']) && ($this->container['max_download_speed'] > 1073741823)) {
            $invalidProperties[] = "invalid value for 'max_download_speed', must be smaller than or equal to 1073741823.";
        }

        if (!is_null($this->container['max_download_speed']) && ($this->container['max_download_speed'] < -1073741824)) {
            $invalidProperties[] = "invalid value for 'max_download_speed', must be bigger than or equal to -1073741824.";
        }

        if (!is_null($this->container['max_upload_speed']) && ($this->container['max_upload_speed'] > 1073741823)) {
            $invalidProperties[] = "invalid value for 'max_upload_speed', must be smaller than or equal to 1073741823.";
        }

        if (!is_null($this->container['max_upload_speed']) && ($this->container['max_upload_speed'] < -1073741824)) {
            $invalidProperties[] = "invalid value for 'max_upload_speed', must be bigger than or equal to -1073741824.";
        }

        if (!is_null($this->container['binary_chunks_size']) && ($this->container['binary_chunks_size'] > 255)) {
            $invalidProperties[] = "invalid value for 'binary_chunks_size', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['binary_chunks_size']) && ($this->container['binary_chunks_size'] < 0)) {
            $invalidProperties[] = "invalid value for 'binary_chunks_size', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['read_buffer_size']) && ($this->container['read_buffer_size'] > 1073741823)) {
            $invalidProperties[] = "invalid value for 'read_buffer_size', must be smaller than or equal to 1073741823.";
        }

        if (!is_null($this->container['read_buffer_size']) && ($this->container['read_buffer_size'] < -1073741824)) {
            $invalidProperties[] = "invalid value for 'read_buffer_size', must be bigger than or equal to -1073741824.";
        }

        if (!is_null($this->container['read_queue_size']) && ($this->container['read_queue_size'] > 1073741823)) {
            $invalidProperties[] = "invalid value for 'read_queue_size', must be smaller than or equal to 1073741823.";
        }

        if (!is_null($this->container['read_queue_size']) && ($this->container['read_queue_size'] < -1073741824)) {
            $invalidProperties[] = "invalid value for 'read_queue_size', must be bigger than or equal to -1073741824.";
        }

        if (!is_null($this->container['write_queue_size']) && ($this->container['write_queue_size'] > 1073741823)) {
            $invalidProperties[] = "invalid value for 'write_queue_size', must be smaller than or equal to 1073741823.";
        }

        if (!is_null($this->container['write_queue_size']) && ($this->container['write_queue_size'] < -1073741824)) {
            $invalidProperties[] = "invalid value for 'write_queue_size', must be bigger than or equal to -1073741824.";
        }

        if (!is_null($this->container['incoming_app_message_queue_size']) && ($this->container['incoming_app_message_queue_size'] > 1073741823)) {
            $invalidProperties[] = "invalid value for 'incoming_app_message_queue_size', must be smaller than or equal to 1073741823.";
        }

        if (!is_null($this->container['incoming_app_message_queue_size']) && ($this->container['incoming_app_message_queue_size'] < -1073741824)) {
            $invalidProperties[] = "invalid value for 'incoming_app_message_queue_size', must be bigger than or equal to -1073741824.";
        }

        if (!is_null($this->container['incoming_message_queue_size']) && ($this->container['incoming_message_queue_size'] > 1073741823)) {
            $invalidProperties[] = "invalid value for 'incoming_message_queue_size', must be smaller than or equal to 1073741823.";
        }

        if (!is_null($this->container['incoming_message_queue_size']) && ($this->container['incoming_message_queue_size'] < -1073741824)) {
            $invalidProperties[] = "invalid value for 'incoming_message_queue_size', must be bigger than or equal to -1073741824.";
        }

        if (!is_null($this->container['outgoing_message_queue_size']) && ($this->container['outgoing_message_queue_size'] > 1073741823)) {
            $invalidProperties[] = "invalid value for 'outgoing_message_queue_size', must be smaller than or equal to 1073741823.";
        }

        if (!is_null($this->container['outgoing_message_queue_size']) && ($this->container['outgoing_message_queue_size'] < -1073741824)) {
            $invalidProperties[] = "invalid value for 'outgoing_message_queue_size', must be bigger than or equal to -1073741824.";
        }

        if (!is_null($this->container['peer_greylist_size']) && ($this->container['peer_greylist_size'] > 65535)) {
            $invalidProperties[] = "invalid value for 'peer_greylist_size', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['peer_greylist_size']) && ($this->container['peer_greylist_size'] < 0)) {
            $invalidProperties[] = "invalid value for 'peer_greylist_size', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['ip_greylist_size_in_kilobytes']) && ($this->container['ip_greylist_size_in_kilobytes'] > 65535)) {
            $invalidProperties[] = "invalid value for 'ip_greylist_size_in_kilobytes', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['ip_greylist_size_in_kilobytes']) && ($this->container['ip_greylist_size_in_kilobytes'] < 0)) {
            $invalidProperties[] = "invalid value for 'ip_greylist_size_in_kilobytes', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets connection_timeout
     *
     * @return OneOfInteger|null
     */
    public function getConnectionTimeout()
    {
        return $this->container['connection_timeout'];
    }

    /**
     * Sets connection_timeout
     *
     * @param OneOfInteger|null $connection_timeout Delay acceptable when initiating a connection to a new peer, in seconds.
     *
     * @return self
     */
    public function setConnectionTimeout($connection_timeout)
    {
        $this->container['connection_timeout'] = $connection_timeout;

        return $this;
    }

    /**
     * Gets authentication_timeout
     *
     * @return OneOfInteger|null
     */
    public function getAuthenticationTimeout()
    {
        return $this->container['authentication_timeout'];
    }

    /**
     * Sets authentication_timeout
     *
     * @param OneOfInteger|null $authentication_timeout Delay granted to a peer to perform authentication, in seconds.
     *
     * @return self
     */
    public function setAuthenticationTimeout($authentication_timeout)
    {
        $this->container['authentication_timeout'] = $authentication_timeout;

        return $this;
    }

    /**
     * Gets min_connections
     *
     * @return int|null
     */
    public function getMinConnections()
    {
        return $this->container['min_connections'];
    }

    /**
     * Sets min_connections
     *
     * @param int|null $min_connections Strict minimum number of connections (triggers an urgent maintenance).
     *
     * @return self
     */
    public function setMinConnections($min_connections)
    {

        if (!is_null($min_connections) && ($min_connections > 65535)) {
            throw new \InvalidArgumentException('invalid value for $min_connections when calling InlineResponse2004P2pLimits., must be smaller than or equal to 65535.');
        }
        if (!is_null($min_connections) && ($min_connections < 0)) {
            throw new \InvalidArgumentException('invalid value for $min_connections when calling InlineResponse2004P2pLimits., must be bigger than or equal to 0.');
        }

        $this->container['min_connections'] = $min_connections;

        return $this;
    }

    /**
     * Gets expected_connections
     *
     * @return int|null
     */
    public function getExpectedConnections()
    {
        return $this->container['expected_connections'];
    }

    /**
     * Sets expected_connections
     *
     * @param int|null $expected_connections Targeted number of connections to reach when bootstrapping / maintaining.
     *
     * @return self
     */
    public function setExpectedConnections($expected_connections)
    {

        if (!is_null($expected_connections) && ($expected_connections > 65535)) {
            throw new \InvalidArgumentException('invalid value for $expected_connections when calling InlineResponse2004P2pLimits., must be smaller than or equal to 65535.');
        }
        if (!is_null($expected_connections) && ($expected_connections < 0)) {
            throw new \InvalidArgumentException('invalid value for $expected_connections when calling InlineResponse2004P2pLimits., must be bigger than or equal to 0.');
        }

        $this->container['expected_connections'] = $expected_connections;

        return $this;
    }

    /**
     * Gets max_connections
     *
     * @return int|null
     */
    public function getMaxConnections()
    {
        return $this->container['max_connections'];
    }

    /**
     * Sets max_connections
     *
     * @param int|null $max_connections Maximum number of connections (exceeding peers are disconnected).
     *
     * @return self
     */
    public function setMaxConnections($max_connections)
    {

        if (!is_null($max_connections) && ($max_connections > 65535)) {
            throw new \InvalidArgumentException('invalid value for $max_connections when calling InlineResponse2004P2pLimits., must be smaller than or equal to 65535.');
        }
        if (!is_null($max_connections) && ($max_connections < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_connections when calling InlineResponse2004P2pLimits., must be bigger than or equal to 0.');
        }

        $this->container['max_connections'] = $max_connections;

        return $this;
    }

    /**
     * Gets backlog
     *
     * @return int|null
     */
    public function getBacklog()
    {
        return $this->container['backlog'];
    }

    /**
     * Sets backlog
     *
     * @param int|null $backlog Number above which pending incoming connections are immediately rejected.
     *
     * @return self
     */
    public function setBacklog($backlog)
    {

        if (!is_null($backlog) && ($backlog > 255)) {
            throw new \InvalidArgumentException('invalid value for $backlog when calling InlineResponse2004P2pLimits., must be smaller than or equal to 255.');
        }
        if (!is_null($backlog) && ($backlog < 0)) {
            throw new \InvalidArgumentException('invalid value for $backlog when calling InlineResponse2004P2pLimits., must be bigger than or equal to 0.');
        }

        $this->container['backlog'] = $backlog;

        return $this;
    }

    /**
     * Gets max_incoming_connections
     *
     * @return int|null
     */
    public function getMaxIncomingConnections()
    {
        return $this->container['max_incoming_connections'];
    }

    /**
     * Sets max_incoming_connections
     *
     * @param int|null $max_incoming_connections Number above which pending incoming connections are immediately rejected.
     *
     * @return self
     */
    public function setMaxIncomingConnections($max_incoming_connections)
    {

        if (!is_null($max_incoming_connections) && ($max_incoming_connections > 255)) {
            throw new \InvalidArgumentException('invalid value for $max_incoming_connections when calling InlineResponse2004P2pLimits., must be smaller than or equal to 255.');
        }
        if (!is_null($max_incoming_connections) && ($max_incoming_connections < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_incoming_connections when calling InlineResponse2004P2pLimits., must be bigger than or equal to 0.');
        }

        $this->container['max_incoming_connections'] = $max_incoming_connections;

        return $this;
    }

    /**
     * Gets max_download_speed
     *
     * @return int|null
     */
    public function getMaxDownloadSpeed()
    {
        return $this->container['max_download_speed'];
    }

    /**
     * Sets max_download_speed
     *
     * @param int|null $max_download_speed Max download speeds in KiB/s.
     *
     * @return self
     */
    public function setMaxDownloadSpeed($max_download_speed)
    {

        if (!is_null($max_download_speed) && ($max_download_speed > 1073741823)) {
            throw new \InvalidArgumentException('invalid value for $max_download_speed when calling InlineResponse2004P2pLimits., must be smaller than or equal to 1073741823.');
        }
        if (!is_null($max_download_speed) && ($max_download_speed < -1073741824)) {
            throw new \InvalidArgumentException('invalid value for $max_download_speed when calling InlineResponse2004P2pLimits., must be bigger than or equal to -1073741824.');
        }

        $this->container['max_download_speed'] = $max_download_speed;

        return $this;
    }

    /**
     * Gets max_upload_speed
     *
     * @return int|null
     */
    public function getMaxUploadSpeed()
    {
        return $this->container['max_upload_speed'];
    }

    /**
     * Sets max_upload_speed
     *
     * @param int|null $max_upload_speed Max upload speeds in KiB/s.
     *
     * @return self
     */
    public function setMaxUploadSpeed($max_upload_speed)
    {

        if (!is_null($max_upload_speed) && ($max_upload_speed > 1073741823)) {
            throw new \InvalidArgumentException('invalid value for $max_upload_speed when calling InlineResponse2004P2pLimits., must be smaller than or equal to 1073741823.');
        }
        if (!is_null($max_upload_speed) && ($max_upload_speed < -1073741824)) {
            throw new \InvalidArgumentException('invalid value for $max_upload_speed when calling InlineResponse2004P2pLimits., must be bigger than or equal to -1073741824.');
        }

        $this->container['max_upload_speed'] = $max_upload_speed;

        return $this;
    }

    /**
     * Gets swap_linger
     *
     * @return int|null
     */
    public function getSwapLinger()
    {
        return $this->container['swap_linger'];
    }

    /**
     * Sets swap_linger
     *
     * @param int|null $swap_linger A span of time, as seen by the local computer.
     *
     * @return self
     */
    public function setSwapLinger($swap_linger)
    {
        $this->container['swap_linger'] = $swap_linger;

        return $this;
    }

    /**
     * Gets binary_chunks_size
     *
     * @return int|null
     */
    public function getBinaryChunksSize()
    {
        return $this->container['binary_chunks_size'];
    }

    /**
     * Sets binary_chunks_size
     *
     * @param int|null $binary_chunks_size binary_chunks_size
     *
     * @return self
     */
    public function setBinaryChunksSize($binary_chunks_size)
    {

        if (!is_null($binary_chunks_size) && ($binary_chunks_size > 255)) {
            throw new \InvalidArgumentException('invalid value for $binary_chunks_size when calling InlineResponse2004P2pLimits., must be smaller than or equal to 255.');
        }
        if (!is_null($binary_chunks_size) && ($binary_chunks_size < 0)) {
            throw new \InvalidArgumentException('invalid value for $binary_chunks_size when calling InlineResponse2004P2pLimits., must be bigger than or equal to 0.');
        }

        $this->container['binary_chunks_size'] = $binary_chunks_size;

        return $this;
    }

    /**
     * Gets read_buffer_size
     *
     * @return int|null
     */
    public function getReadBufferSize()
    {
        return $this->container['read_buffer_size'];
    }

    /**
     * Sets read_buffer_size
     *
     * @param int|null $read_buffer_size Size of the buffer passed to read(2).
     *
     * @return self
     */
    public function setReadBufferSize($read_buffer_size)
    {

        if (!is_null($read_buffer_size) && ($read_buffer_size > 1073741823)) {
            throw new \InvalidArgumentException('invalid value for $read_buffer_size when calling InlineResponse2004P2pLimits., must be smaller than or equal to 1073741823.');
        }
        if (!is_null($read_buffer_size) && ($read_buffer_size < -1073741824)) {
            throw new \InvalidArgumentException('invalid value for $read_buffer_size when calling InlineResponse2004P2pLimits., must be bigger than or equal to -1073741824.');
        }

        $this->container['read_buffer_size'] = $read_buffer_size;

        return $this;
    }

    /**
     * Gets read_queue_size
     *
     * @return int|null
     */
    public function getReadQueueSize()
    {
        return $this->container['read_queue_size'];
    }

    /**
     * Sets read_queue_size
     *
     * @param int|null $read_queue_size read_queue_size
     *
     * @return self
     */
    public function setReadQueueSize($read_queue_size)
    {

        if (!is_null($read_queue_size) && ($read_queue_size > 1073741823)) {
            throw new \InvalidArgumentException('invalid value for $read_queue_size when calling InlineResponse2004P2pLimits., must be smaller than or equal to 1073741823.');
        }
        if (!is_null($read_queue_size) && ($read_queue_size < -1073741824)) {
            throw new \InvalidArgumentException('invalid value for $read_queue_size when calling InlineResponse2004P2pLimits., must be bigger than or equal to -1073741824.');
        }

        $this->container['read_queue_size'] = $read_queue_size;

        return $this;
    }

    /**
     * Gets write_queue_size
     *
     * @return int|null
     */
    public function getWriteQueueSize()
    {
        return $this->container['write_queue_size'];
    }

    /**
     * Sets write_queue_size
     *
     * @param int|null $write_queue_size write_queue_size
     *
     * @return self
     */
    public function setWriteQueueSize($write_queue_size)
    {

        if (!is_null($write_queue_size) && ($write_queue_size > 1073741823)) {
            throw new \InvalidArgumentException('invalid value for $write_queue_size when calling InlineResponse2004P2pLimits., must be smaller than or equal to 1073741823.');
        }
        if (!is_null($write_queue_size) && ($write_queue_size < -1073741824)) {
            throw new \InvalidArgumentException('invalid value for $write_queue_size when calling InlineResponse2004P2pLimits., must be bigger than or equal to -1073741824.');
        }

        $this->container['write_queue_size'] = $write_queue_size;

        return $this;
    }

    /**
     * Gets incoming_app_message_queue_size
     *
     * @return int|null
     */
    public function getIncomingAppMessageQueueSize()
    {
        return $this->container['incoming_app_message_queue_size'];
    }

    /**
     * Sets incoming_app_message_queue_size
     *
     * @param int|null $incoming_app_message_queue_size incoming_app_message_queue_size
     *
     * @return self
     */
    public function setIncomingAppMessageQueueSize($incoming_app_message_queue_size)
    {

        if (!is_null($incoming_app_message_queue_size) && ($incoming_app_message_queue_size > 1073741823)) {
            throw new \InvalidArgumentException('invalid value for $incoming_app_message_queue_size when calling InlineResponse2004P2pLimits., must be smaller than or equal to 1073741823.');
        }
        if (!is_null($incoming_app_message_queue_size) && ($incoming_app_message_queue_size < -1073741824)) {
            throw new \InvalidArgumentException('invalid value for $incoming_app_message_queue_size when calling InlineResponse2004P2pLimits., must be bigger than or equal to -1073741824.');
        }

        $this->container['incoming_app_message_queue_size'] = $incoming_app_message_queue_size;

        return $this;
    }

    /**
     * Gets incoming_message_queue_size
     *
     * @return int|null
     */
    public function getIncomingMessageQueueSize()
    {
        return $this->container['incoming_message_queue_size'];
    }

    /**
     * Sets incoming_message_queue_size
     *
     * @param int|null $incoming_message_queue_size incoming_message_queue_size
     *
     * @return self
     */
    public function setIncomingMessageQueueSize($incoming_message_queue_size)
    {

        if (!is_null($incoming_message_queue_size) && ($incoming_message_queue_size > 1073741823)) {
            throw new \InvalidArgumentException('invalid value for $incoming_message_queue_size when calling InlineResponse2004P2pLimits., must be smaller than or equal to 1073741823.');
        }
        if (!is_null($incoming_message_queue_size) && ($incoming_message_queue_size < -1073741824)) {
            throw new \InvalidArgumentException('invalid value for $incoming_message_queue_size when calling InlineResponse2004P2pLimits., must be bigger than or equal to -1073741824.');
        }

        $this->container['incoming_message_queue_size'] = $incoming_message_queue_size;

        return $this;
    }

    /**
     * Gets outgoing_message_queue_size
     *
     * @return int|null
     */
    public function getOutgoingMessageQueueSize()
    {
        return $this->container['outgoing_message_queue_size'];
    }

    /**
     * Sets outgoing_message_queue_size
     *
     * @param int|null $outgoing_message_queue_size outgoing_message_queue_size
     *
     * @return self
     */
    public function setOutgoingMessageQueueSize($outgoing_message_queue_size)
    {

        if (!is_null($outgoing_message_queue_size) && ($outgoing_message_queue_size > 1073741823)) {
            throw new \InvalidArgumentException('invalid value for $outgoing_message_queue_size when calling InlineResponse2004P2pLimits., must be smaller than or equal to 1073741823.');
        }
        if (!is_null($outgoing_message_queue_size) && ($outgoing_message_queue_size < -1073741824)) {
            throw new \InvalidArgumentException('invalid value for $outgoing_message_queue_size when calling InlineResponse2004P2pLimits., must be bigger than or equal to -1073741824.');
        }

        $this->container['outgoing_message_queue_size'] = $outgoing_message_queue_size;

        return $this;
    }

    /**
     * Gets max_known_points
     *
     * @return OneOfIntegerInteger[]|null
     */
    public function getMaxKnownPoints()
    {
        return $this->container['max_known_points'];
    }

    /**
     * Sets max_known_points
     *
     * @param OneOfIntegerInteger[]|null $max_known_points max_known_points
     *
     * @return self
     */
    public function setMaxKnownPoints($max_known_points)
    {
        $this->container['max_known_points'] = $max_known_points;

        return $this;
    }

    /**
     * Gets max_known_peer_ids
     *
     * @return OneOfIntegerInteger[]|null
     */
    public function getMaxKnownPeerIds()
    {
        return $this->container['max_known_peer_ids'];
    }

    /**
     * Sets max_known_peer_ids
     *
     * @param OneOfIntegerInteger[]|null $max_known_peer_ids The max and target size for the known address table.
     *
     * @return self
     */
    public function setMaxKnownPeerIds($max_known_peer_ids)
    {
        $this->container['max_known_peer_ids'] = $max_known_peer_ids;

        return $this;
    }

    /**
     * Gets peer_greylist_size
     *
     * @return int|null
     */
    public function getPeerGreylistSize()
    {
        return $this->container['peer_greylist_size'];
    }

    /**
     * Sets peer_greylist_size
     *
     * @param int|null $peer_greylist_size The number of peer_ids kept in the peer_id greylist.
     *
     * @return self
     */
    public function setPeerGreylistSize($peer_greylist_size)
    {

        if (!is_null($peer_greylist_size) && ($peer_greylist_size > 65535)) {
            throw new \InvalidArgumentException('invalid value for $peer_greylist_size when calling InlineResponse2004P2pLimits., must be smaller than or equal to 65535.');
        }
        if (!is_null($peer_greylist_size) && ($peer_greylist_size < 0)) {
            throw new \InvalidArgumentException('invalid value for $peer_greylist_size when calling InlineResponse2004P2pLimits., must be bigger than or equal to 0.');
        }

        $this->container['peer_greylist_size'] = $peer_greylist_size;

        return $this;
    }

    /**
     * Gets ip_greylist_size_in_kilobytes
     *
     * @return int|null
     */
    public function getIpGreylistSizeInKilobytes()
    {
        return $this->container['ip_greylist_size_in_kilobytes'];
    }

    /**
     * Sets ip_greylist_size_in_kilobytes
     *
     * @param int|null $ip_greylist_size_in_kilobytes The size of the IP address greylist (in kilobytes).
     *
     * @return self
     */
    public function setIpGreylistSizeInKilobytes($ip_greylist_size_in_kilobytes)
    {

        if (!is_null($ip_greylist_size_in_kilobytes) && ($ip_greylist_size_in_kilobytes > 65535)) {
            throw new \InvalidArgumentException('invalid value for $ip_greylist_size_in_kilobytes when calling InlineResponse2004P2pLimits., must be smaller than or equal to 65535.');
        }
        if (!is_null($ip_greylist_size_in_kilobytes) && ($ip_greylist_size_in_kilobytes < 0)) {
            throw new \InvalidArgumentException('invalid value for $ip_greylist_size_in_kilobytes when calling InlineResponse2004P2pLimits., must be bigger than or equal to 0.');
        }

        $this->container['ip_greylist_size_in_kilobytes'] = $ip_greylist_size_in_kilobytes;

        return $this;
    }

    /**
     * Gets ip_greylist_cleanup_delay
     *
     * @return OneOfInteger|null
     */
    public function getIpGreylistCleanupDelay()
    {
        return $this->container['ip_greylist_cleanup_delay'];
    }

    /**
     * Sets ip_greylist_cleanup_delay
     *
     * @param OneOfInteger|null $ip_greylist_cleanup_delay The time an IP address is kept in the greylist.
     *
     * @return self
     */
    public function setIpGreylistCleanupDelay($ip_greylist_cleanup_delay)
    {
        $this->container['ip_greylist_cleanup_delay'] = $ip_greylist_cleanup_delay;

        return $this;
    }

    /**
     * Gets greylist_timeout
     *
     * @return OneOfInteger|null
     */
    public function getGreylistTimeout()
    {
        return $this->container['greylist_timeout'];
    }

    /**
     * Sets greylist_timeout
     *
     * @param OneOfInteger|null $greylist_timeout GC delay for the greylists tables, in seconds.
     *
     * @return self
     */
    public function setGreylistTimeout($greylist_timeout)
    {
        $this->container['greylist_timeout'] = $greylist_timeout;

        return $this;
    }

    /**
     * Gets maintenance_idle_time
     *
     * @return OneOfInteger|null
     */
    public function getMaintenanceIdleTime()
    {
        return $this->container['maintenance_idle_time'];
    }

    /**
     * Sets maintenance_idle_time
     *
     * @param OneOfInteger|null $maintenance_idle_time How long to wait at most, in seconds, before running a maintenance loop.
     *
     * @return self
     */
    public function setMaintenanceIdleTime($maintenance_idle_time)
    {
        $this->container['maintenance_idle_time'] = $maintenance_idle_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


