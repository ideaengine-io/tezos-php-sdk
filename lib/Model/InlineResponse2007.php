<?php
/**
 * InlineResponse2007
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  IdeaEngine\TezosSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Tezos RPC
 *
 * Tezos client RPC API.
 *
 * The version of the OpenAPI document: 11.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace IdeaEngine\TezosSDK\Model;

use \ArrayAccess;
use \IdeaEngine\TezosSDK\ObjectSerializer;

/**
 * InlineResponse2007 Class Doc Comment
 *
 * @category Class
 * @package  IdeaEngine\TezosSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse2007 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_7';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'incoming' => 'bool',
        'peer_id' => '\IdeaEngine\TezosSDK\Model\CryptoBoxPublicKeyHash',
        'id_point' => '\IdeaEngine\TezosSDK\Model\P2pConnectionId',
        'remote_socket_port' => 'int',
        'announced_version' => '\IdeaEngine\TezosSDK\Model\NetworkVersion',
        'private' => 'bool',
        'local_metadata' => '\IdeaEngine\TezosSDK\Model\NetworkConnectionsLocalMetadata',
        'remote_metadata' => '\IdeaEngine\TezosSDK\Model\NetworkConnectionsLocalMetadata'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'incoming' => null,
        'peer_id' => null,
        'id_point' => null,
        'remote_socket_port' => null,
        'announced_version' => null,
        'private' => null,
        'local_metadata' => null,
        'remote_metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'incoming' => 'incoming',
        'peer_id' => 'peer_id',
        'id_point' => 'id_point',
        'remote_socket_port' => 'remote_socket_port',
        'announced_version' => 'announced_version',
        'private' => 'private',
        'local_metadata' => 'local_metadata',
        'remote_metadata' => 'remote_metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'incoming' => 'setIncoming',
        'peer_id' => 'setPeerId',
        'id_point' => 'setIdPoint',
        'remote_socket_port' => 'setRemoteSocketPort',
        'announced_version' => 'setAnnouncedVersion',
        'private' => 'setPrivate',
        'local_metadata' => 'setLocalMetadata',
        'remote_metadata' => 'setRemoteMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'incoming' => 'getIncoming',
        'peer_id' => 'getPeerId',
        'id_point' => 'getIdPoint',
        'remote_socket_port' => 'getRemoteSocketPort',
        'announced_version' => 'getAnnouncedVersion',
        'private' => 'getPrivate',
        'local_metadata' => 'getLocalMetadata',
        'remote_metadata' => 'getRemoteMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['incoming'] = $data['incoming'] ?? null;
        $this->container['peer_id'] = $data['peer_id'] ?? null;
        $this->container['id_point'] = $data['id_point'] ?? null;
        $this->container['remote_socket_port'] = $data['remote_socket_port'] ?? null;
        $this->container['announced_version'] = $data['announced_version'] ?? null;
        $this->container['private'] = $data['private'] ?? null;
        $this->container['local_metadata'] = $data['local_metadata'] ?? null;
        $this->container['remote_metadata'] = $data['remote_metadata'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['incoming'] === null) {
            $invalidProperties[] = "'incoming' can't be null";
        }
        if ($this->container['peer_id'] === null) {
            $invalidProperties[] = "'peer_id' can't be null";
        }
        if ($this->container['id_point'] === null) {
            $invalidProperties[] = "'id_point' can't be null";
        }
        if ($this->container['remote_socket_port'] === null) {
            $invalidProperties[] = "'remote_socket_port' can't be null";
        }
        if (($this->container['remote_socket_port'] > 65535)) {
            $invalidProperties[] = "invalid value for 'remote_socket_port', must be smaller than or equal to 65535.";
        }

        if (($this->container['remote_socket_port'] < 0)) {
            $invalidProperties[] = "invalid value for 'remote_socket_port', must be bigger than or equal to 0.";
        }

        if ($this->container['announced_version'] === null) {
            $invalidProperties[] = "'announced_version' can't be null";
        }
        if ($this->container['private'] === null) {
            $invalidProperties[] = "'private' can't be null";
        }
        if ($this->container['local_metadata'] === null) {
            $invalidProperties[] = "'local_metadata' can't be null";
        }
        if ($this->container['remote_metadata'] === null) {
            $invalidProperties[] = "'remote_metadata' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets incoming
     *
     * @return bool
     */
    public function getIncoming()
    {
        return $this->container['incoming'];
    }

    /**
     * Sets incoming
     *
     * @param bool $incoming incoming
     *
     * @return self
     */
    public function setIncoming($incoming)
    {
        $this->container['incoming'] = $incoming;

        return $this;
    }

    /**
     * Gets peer_id
     *
     * @return \IdeaEngine\TezosSDK\Model\CryptoBoxPublicKeyHash
     */
    public function getPeerId()
    {
        return $this->container['peer_id'];
    }

    /**
     * Sets peer_id
     *
     * @param \IdeaEngine\TezosSDK\Model\CryptoBoxPublicKeyHash $peer_id peer_id
     *
     * @return self
     */
    public function setPeerId($peer_id)
    {
        $this->container['peer_id'] = $peer_id;

        return $this;
    }

    /**
     * Gets id_point
     *
     * @return \IdeaEngine\TezosSDK\Model\P2pConnectionId
     */
    public function getIdPoint()
    {
        return $this->container['id_point'];
    }

    /**
     * Sets id_point
     *
     * @param \IdeaEngine\TezosSDK\Model\P2pConnectionId $id_point id_point
     *
     * @return self
     */
    public function setIdPoint($id_point)
    {
        $this->container['id_point'] = $id_point;

        return $this;
    }

    /**
     * Gets remote_socket_port
     *
     * @return int
     */
    public function getRemoteSocketPort()
    {
        return $this->container['remote_socket_port'];
    }

    /**
     * Sets remote_socket_port
     *
     * @param int $remote_socket_port remote_socket_port
     *
     * @return self
     */
    public function setRemoteSocketPort($remote_socket_port)
    {

        if (($remote_socket_port > 65535)) {
            throw new \InvalidArgumentException('invalid value for $remote_socket_port when calling InlineResponse2007., must be smaller than or equal to 65535.');
        }
        if (($remote_socket_port < 0)) {
            throw new \InvalidArgumentException('invalid value for $remote_socket_port when calling InlineResponse2007., must be bigger than or equal to 0.');
        }

        $this->container['remote_socket_port'] = $remote_socket_port;

        return $this;
    }

    /**
     * Gets announced_version
     *
     * @return \IdeaEngine\TezosSDK\Model\NetworkVersion
     */
    public function getAnnouncedVersion()
    {
        return $this->container['announced_version'];
    }

    /**
     * Sets announced_version
     *
     * @param \IdeaEngine\TezosSDK\Model\NetworkVersion $announced_version announced_version
     *
     * @return self
     */
    public function setAnnouncedVersion($announced_version)
    {
        $this->container['announced_version'] = $announced_version;

        return $this;
    }

    /**
     * Gets private
     *
     * @return bool
     */
    public function getPrivate()
    {
        return $this->container['private'];
    }

    /**
     * Sets private
     *
     * @param bool $private private
     *
     * @return self
     */
    public function setPrivate($private)
    {
        $this->container['private'] = $private;

        return $this;
    }

    /**
     * Gets local_metadata
     *
     * @return \IdeaEngine\TezosSDK\Model\NetworkConnectionsLocalMetadata
     */
    public function getLocalMetadata()
    {
        return $this->container['local_metadata'];
    }

    /**
     * Sets local_metadata
     *
     * @param \IdeaEngine\TezosSDK\Model\NetworkConnectionsLocalMetadata $local_metadata local_metadata
     *
     * @return self
     */
    public function setLocalMetadata($local_metadata)
    {
        $this->container['local_metadata'] = $local_metadata;

        return $this;
    }

    /**
     * Gets remote_metadata
     *
     * @return \IdeaEngine\TezosSDK\Model\NetworkConnectionsLocalMetadata
     */
    public function getRemoteMetadata()
    {
        return $this->container['remote_metadata'];
    }

    /**
     * Sets remote_metadata
     *
     * @param \IdeaEngine\TezosSDK\Model\NetworkConnectionsLocalMetadata $remote_metadata remote_metadata
     *
     * @return self
     */
    public function setRemoteMetadata($remote_metadata)
    {
        $this->container['remote_metadata'] = $remote_metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


