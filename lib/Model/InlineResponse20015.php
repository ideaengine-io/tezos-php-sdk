<?php
/**
 * InlineResponse20015
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  IdeaEngine\TezosSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Tezos RPC
 *
 * Tezos client RPC API.
 *
 * The version of the OpenAPI document: 11.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace IdeaEngine\TezosSDK\Model;

use \ArrayAccess;
use \IdeaEngine\TezosSDK\ObjectSerializer;

/**
 * InlineResponse20015 Class Doc Comment
 *
 * @category Class
 * @package  IdeaEngine\TezosSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse20015 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_15';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'p2p_readers' => 'int',
        'active_chains' => 'int',
        'operation_db' => '\IdeaEngine\TezosSDK\Model\InlineResponse20015OperationDb',
        'operations_db' => '\IdeaEngine\TezosSDK\Model\InlineResponse20015OperationDb',
        'block_header_db' => '\IdeaEngine\TezosSDK\Model\InlineResponse20015OperationDb',
        'active_connections' => 'int',
        'active_peers' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'p2p_readers' => null,
        'active_chains' => null,
        'operation_db' => null,
        'operations_db' => null,
        'block_header_db' => null,
        'active_connections' => null,
        'active_peers' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'p2p_readers' => 'p2p_readers',
        'active_chains' => 'active_chains',
        'operation_db' => 'operation_db',
        'operations_db' => 'operations_db',
        'block_header_db' => 'block_header_db',
        'active_connections' => 'active_connections',
        'active_peers' => 'active_peers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'p2p_readers' => 'setP2pReaders',
        'active_chains' => 'setActiveChains',
        'operation_db' => 'setOperationDb',
        'operations_db' => 'setOperationsDb',
        'block_header_db' => 'setBlockHeaderDb',
        'active_connections' => 'setActiveConnections',
        'active_peers' => 'setActivePeers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'p2p_readers' => 'getP2pReaders',
        'active_chains' => 'getActiveChains',
        'operation_db' => 'getOperationDb',
        'operations_db' => 'getOperationsDb',
        'block_header_db' => 'getBlockHeaderDb',
        'active_connections' => 'getActiveConnections',
        'active_peers' => 'getActivePeers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['p2p_readers'] = $data['p2p_readers'] ?? null;
        $this->container['active_chains'] = $data['active_chains'] ?? null;
        $this->container['operation_db'] = $data['operation_db'] ?? null;
        $this->container['operations_db'] = $data['operations_db'] ?? null;
        $this->container['block_header_db'] = $data['block_header_db'] ?? null;
        $this->container['active_connections'] = $data['active_connections'] ?? null;
        $this->container['active_peers'] = $data['active_peers'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['p2p_readers'] === null) {
            $invalidProperties[] = "'p2p_readers' can't be null";
        }
        if (($this->container['p2p_readers'] > 1073741823)) {
            $invalidProperties[] = "invalid value for 'p2p_readers', must be smaller than or equal to 1073741823.";
        }

        if (($this->container['p2p_readers'] < -1073741824)) {
            $invalidProperties[] = "invalid value for 'p2p_readers', must be bigger than or equal to -1073741824.";
        }

        if ($this->container['active_chains'] === null) {
            $invalidProperties[] = "'active_chains' can't be null";
        }
        if (($this->container['active_chains'] > 1073741823)) {
            $invalidProperties[] = "invalid value for 'active_chains', must be smaller than or equal to 1073741823.";
        }

        if (($this->container['active_chains'] < -1073741824)) {
            $invalidProperties[] = "invalid value for 'active_chains', must be bigger than or equal to -1073741824.";
        }

        if ($this->container['operation_db'] === null) {
            $invalidProperties[] = "'operation_db' can't be null";
        }
        if ($this->container['operations_db'] === null) {
            $invalidProperties[] = "'operations_db' can't be null";
        }
        if ($this->container['block_header_db'] === null) {
            $invalidProperties[] = "'block_header_db' can't be null";
        }
        if ($this->container['active_connections'] === null) {
            $invalidProperties[] = "'active_connections' can't be null";
        }
        if (($this->container['active_connections'] > 1073741823)) {
            $invalidProperties[] = "invalid value for 'active_connections', must be smaller than or equal to 1073741823.";
        }

        if (($this->container['active_connections'] < -1073741824)) {
            $invalidProperties[] = "invalid value for 'active_connections', must be bigger than or equal to -1073741824.";
        }

        if ($this->container['active_peers'] === null) {
            $invalidProperties[] = "'active_peers' can't be null";
        }
        if (($this->container['active_peers'] > 1073741823)) {
            $invalidProperties[] = "invalid value for 'active_peers', must be smaller than or equal to 1073741823.";
        }

        if (($this->container['active_peers'] < -1073741824)) {
            $invalidProperties[] = "invalid value for 'active_peers', must be bigger than or equal to -1073741824.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets p2p_readers
     *
     * @return int
     */
    public function getP2pReaders()
    {
        return $this->container['p2p_readers'];
    }

    /**
     * Sets p2p_readers
     *
     * @param int $p2p_readers p2p_readers
     *
     * @return self
     */
    public function setP2pReaders($p2p_readers)
    {

        if (($p2p_readers > 1073741823)) {
            throw new \InvalidArgumentException('invalid value for $p2p_readers when calling InlineResponse20015., must be smaller than or equal to 1073741823.');
        }
        if (($p2p_readers < -1073741824)) {
            throw new \InvalidArgumentException('invalid value for $p2p_readers when calling InlineResponse20015., must be bigger than or equal to -1073741824.');
        }

        $this->container['p2p_readers'] = $p2p_readers;

        return $this;
    }

    /**
     * Gets active_chains
     *
     * @return int
     */
    public function getActiveChains()
    {
        return $this->container['active_chains'];
    }

    /**
     * Sets active_chains
     *
     * @param int $active_chains active_chains
     *
     * @return self
     */
    public function setActiveChains($active_chains)
    {

        if (($active_chains > 1073741823)) {
            throw new \InvalidArgumentException('invalid value for $active_chains when calling InlineResponse20015., must be smaller than or equal to 1073741823.');
        }
        if (($active_chains < -1073741824)) {
            throw new \InvalidArgumentException('invalid value for $active_chains when calling InlineResponse20015., must be bigger than or equal to -1073741824.');
        }

        $this->container['active_chains'] = $active_chains;

        return $this;
    }

    /**
     * Gets operation_db
     *
     * @return \IdeaEngine\TezosSDK\Model\InlineResponse20015OperationDb
     */
    public function getOperationDb()
    {
        return $this->container['operation_db'];
    }

    /**
     * Sets operation_db
     *
     * @param \IdeaEngine\TezosSDK\Model\InlineResponse20015OperationDb $operation_db operation_db
     *
     * @return self
     */
    public function setOperationDb($operation_db)
    {
        $this->container['operation_db'] = $operation_db;

        return $this;
    }

    /**
     * Gets operations_db
     *
     * @return \IdeaEngine\TezosSDK\Model\InlineResponse20015OperationDb
     */
    public function getOperationsDb()
    {
        return $this->container['operations_db'];
    }

    /**
     * Sets operations_db
     *
     * @param \IdeaEngine\TezosSDK\Model\InlineResponse20015OperationDb $operations_db operations_db
     *
     * @return self
     */
    public function setOperationsDb($operations_db)
    {
        $this->container['operations_db'] = $operations_db;

        return $this;
    }

    /**
     * Gets block_header_db
     *
     * @return \IdeaEngine\TezosSDK\Model\InlineResponse20015OperationDb
     */
    public function getBlockHeaderDb()
    {
        return $this->container['block_header_db'];
    }

    /**
     * Sets block_header_db
     *
     * @param \IdeaEngine\TezosSDK\Model\InlineResponse20015OperationDb $block_header_db block_header_db
     *
     * @return self
     */
    public function setBlockHeaderDb($block_header_db)
    {
        $this->container['block_header_db'] = $block_header_db;

        return $this;
    }

    /**
     * Gets active_connections
     *
     * @return int
     */
    public function getActiveConnections()
    {
        return $this->container['active_connections'];
    }

    /**
     * Sets active_connections
     *
     * @param int $active_connections active_connections
     *
     * @return self
     */
    public function setActiveConnections($active_connections)
    {

        if (($active_connections > 1073741823)) {
            throw new \InvalidArgumentException('invalid value for $active_connections when calling InlineResponse20015., must be smaller than or equal to 1073741823.');
        }
        if (($active_connections < -1073741824)) {
            throw new \InvalidArgumentException('invalid value for $active_connections when calling InlineResponse20015., must be bigger than or equal to -1073741824.');
        }

        $this->container['active_connections'] = $active_connections;

        return $this;
    }

    /**
     * Gets active_peers
     *
     * @return int
     */
    public function getActivePeers()
    {
        return $this->container['active_peers'];
    }

    /**
     * Sets active_peers
     *
     * @param int $active_peers active_peers
     *
     * @return self
     */
    public function setActivePeers($active_peers)
    {

        if (($active_peers > 1073741823)) {
            throw new \InvalidArgumentException('invalid value for $active_peers when calling InlineResponse20015., must be smaller than or equal to 1073741823.');
        }
        if (($active_peers < -1073741824)) {
            throw new \InvalidArgumentException('invalid value for $active_peers when calling InlineResponse20015., must be bigger than or equal to -1073741824.');
        }

        $this->container['active_peers'] = $active_peers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


