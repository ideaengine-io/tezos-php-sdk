<?php
/**
 * P2pPointInfo
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  IdeaEngine\TezosSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Tezos RPC
 *
 * Tezos client RPC API.
 *
 * The version of the OpenAPI document: 11.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace IdeaEngine\TezosSDK\Model;

use \ArrayAccess;
use \IdeaEngine\TezosSDK\ObjectSerializer;

/**
 * P2pPointInfo Class Doc Comment
 *
 * @category Class
 * @description Information about a peer point. Includes flags, state, and records about past events.
 * @package  IdeaEngine\TezosSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class P2pPointInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'p2p_point.info';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'trusted' => 'bool',
        'greylisted_until' => '\IdeaEngine\TezosSDK\Model\TimestampSystem',
        'state' => '\IdeaEngine\TezosSDK\Model\P2pPointState',
        'p2p_peer_id' => '\IdeaEngine\TezosSDK\Model\CryptoBoxPublicKeyHash',
        'last_failed_connection' => '\IdeaEngine\TezosSDK\Model\TimestampSystem',
        'last_rejected_connection' => 'OneOfCryptoBoxPublicKeyHashTimestampSystem[]',
        'last_established_connection' => 'OneOfCryptoBoxPublicKeyHashTimestampSystem[]',
        'last_disconnection' => 'OneOfCryptoBoxPublicKeyHashTimestampSystem[]',
        'last_seen' => 'OneOfCryptoBoxPublicKeyHashTimestampSystem[]',
        'last_miss' => '\IdeaEngine\TezosSDK\Model\TimestampSystem',
        'expected_peer_id' => '\IdeaEngine\TezosSDK\Model\CryptoBoxPublicKeyHash'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'trusted' => null,
        'greylisted_until' => null,
        'state' => null,
        'p2p_peer_id' => null,
        'last_failed_connection' => null,
        'last_rejected_connection' => null,
        'last_established_connection' => null,
        'last_disconnection' => null,
        'last_seen' => null,
        'last_miss' => null,
        'expected_peer_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'trusted' => 'trusted',
        'greylisted_until' => 'greylisted_until',
        'state' => 'state',
        'p2p_peer_id' => 'p2p_peer_id',
        'last_failed_connection' => 'last_failed_connection',
        'last_rejected_connection' => 'last_rejected_connection',
        'last_established_connection' => 'last_established_connection',
        'last_disconnection' => 'last_disconnection',
        'last_seen' => 'last_seen',
        'last_miss' => 'last_miss',
        'expected_peer_id' => 'expected_peer_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'trusted' => 'setTrusted',
        'greylisted_until' => 'setGreylistedUntil',
        'state' => 'setState',
        'p2p_peer_id' => 'setP2pPeerId',
        'last_failed_connection' => 'setLastFailedConnection',
        'last_rejected_connection' => 'setLastRejectedConnection',
        'last_established_connection' => 'setLastEstablishedConnection',
        'last_disconnection' => 'setLastDisconnection',
        'last_seen' => 'setLastSeen',
        'last_miss' => 'setLastMiss',
        'expected_peer_id' => 'setExpectedPeerId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'trusted' => 'getTrusted',
        'greylisted_until' => 'getGreylistedUntil',
        'state' => 'getState',
        'p2p_peer_id' => 'getP2pPeerId',
        'last_failed_connection' => 'getLastFailedConnection',
        'last_rejected_connection' => 'getLastRejectedConnection',
        'last_established_connection' => 'getLastEstablishedConnection',
        'last_disconnection' => 'getLastDisconnection',
        'last_seen' => 'getLastSeen',
        'last_miss' => 'getLastMiss',
        'expected_peer_id' => 'getExpectedPeerId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['trusted'] = $data['trusted'] ?? null;
        $this->container['greylisted_until'] = $data['greylisted_until'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['p2p_peer_id'] = $data['p2p_peer_id'] ?? null;
        $this->container['last_failed_connection'] = $data['last_failed_connection'] ?? null;
        $this->container['last_rejected_connection'] = $data['last_rejected_connection'] ?? null;
        $this->container['last_established_connection'] = $data['last_established_connection'] ?? null;
        $this->container['last_disconnection'] = $data['last_disconnection'] ?? null;
        $this->container['last_seen'] = $data['last_seen'] ?? null;
        $this->container['last_miss'] = $data['last_miss'] ?? null;
        $this->container['expected_peer_id'] = $data['expected_peer_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['trusted'] === null) {
            $invalidProperties[] = "'trusted' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets trusted
     *
     * @return bool
     */
    public function getTrusted()
    {
        return $this->container['trusted'];
    }

    /**
     * Sets trusted
     *
     * @param bool $trusted trusted
     *
     * @return self
     */
    public function setTrusted($trusted)
    {
        $this->container['trusted'] = $trusted;

        return $this;
    }

    /**
     * Gets greylisted_until
     *
     * @return \IdeaEngine\TezosSDK\Model\TimestampSystem|null
     */
    public function getGreylistedUntil()
    {
        return $this->container['greylisted_until'];
    }

    /**
     * Sets greylisted_until
     *
     * @param \IdeaEngine\TezosSDK\Model\TimestampSystem|null $greylisted_until greylisted_until
     *
     * @return self
     */
    public function setGreylistedUntil($greylisted_until)
    {
        $this->container['greylisted_until'] = $greylisted_until;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \IdeaEngine\TezosSDK\Model\P2pPointState
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \IdeaEngine\TezosSDK\Model\P2pPointState $state state
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets p2p_peer_id
     *
     * @return \IdeaEngine\TezosSDK\Model\CryptoBoxPublicKeyHash|null
     */
    public function getP2pPeerId()
    {
        return $this->container['p2p_peer_id'];
    }

    /**
     * Sets p2p_peer_id
     *
     * @param \IdeaEngine\TezosSDK\Model\CryptoBoxPublicKeyHash|null $p2p_peer_id p2p_peer_id
     *
     * @return self
     */
    public function setP2pPeerId($p2p_peer_id)
    {
        $this->container['p2p_peer_id'] = $p2p_peer_id;

        return $this;
    }

    /**
     * Gets last_failed_connection
     *
     * @return \IdeaEngine\TezosSDK\Model\TimestampSystem|null
     */
    public function getLastFailedConnection()
    {
        return $this->container['last_failed_connection'];
    }

    /**
     * Sets last_failed_connection
     *
     * @param \IdeaEngine\TezosSDK\Model\TimestampSystem|null $last_failed_connection last_failed_connection
     *
     * @return self
     */
    public function setLastFailedConnection($last_failed_connection)
    {
        $this->container['last_failed_connection'] = $last_failed_connection;

        return $this;
    }

    /**
     * Gets last_rejected_connection
     *
     * @return OneOfCryptoBoxPublicKeyHashTimestampSystem[]|null
     */
    public function getLastRejectedConnection()
    {
        return $this->container['last_rejected_connection'];
    }

    /**
     * Sets last_rejected_connection
     *
     * @param OneOfCryptoBoxPublicKeyHashTimestampSystem[]|null $last_rejected_connection last_rejected_connection
     *
     * @return self
     */
    public function setLastRejectedConnection($last_rejected_connection)
    {
        $this->container['last_rejected_connection'] = $last_rejected_connection;

        return $this;
    }

    /**
     * Gets last_established_connection
     *
     * @return OneOfCryptoBoxPublicKeyHashTimestampSystem[]|null
     */
    public function getLastEstablishedConnection()
    {
        return $this->container['last_established_connection'];
    }

    /**
     * Sets last_established_connection
     *
     * @param OneOfCryptoBoxPublicKeyHashTimestampSystem[]|null $last_established_connection last_established_connection
     *
     * @return self
     */
    public function setLastEstablishedConnection($last_established_connection)
    {
        $this->container['last_established_connection'] = $last_established_connection;

        return $this;
    }

    /**
     * Gets last_disconnection
     *
     * @return OneOfCryptoBoxPublicKeyHashTimestampSystem[]|null
     */
    public function getLastDisconnection()
    {
        return $this->container['last_disconnection'];
    }

    /**
     * Sets last_disconnection
     *
     * @param OneOfCryptoBoxPublicKeyHashTimestampSystem[]|null $last_disconnection last_disconnection
     *
     * @return self
     */
    public function setLastDisconnection($last_disconnection)
    {
        $this->container['last_disconnection'] = $last_disconnection;

        return $this;
    }

    /**
     * Gets last_seen
     *
     * @return OneOfCryptoBoxPublicKeyHashTimestampSystem[]|null
     */
    public function getLastSeen()
    {
        return $this->container['last_seen'];
    }

    /**
     * Sets last_seen
     *
     * @param OneOfCryptoBoxPublicKeyHashTimestampSystem[]|null $last_seen last_seen
     *
     * @return self
     */
    public function setLastSeen($last_seen)
    {
        $this->container['last_seen'] = $last_seen;

        return $this;
    }

    /**
     * Gets last_miss
     *
     * @return \IdeaEngine\TezosSDK\Model\TimestampSystem|null
     */
    public function getLastMiss()
    {
        return $this->container['last_miss'];
    }

    /**
     * Sets last_miss
     *
     * @param \IdeaEngine\TezosSDK\Model\TimestampSystem|null $last_miss last_miss
     *
     * @return self
     */
    public function setLastMiss($last_miss)
    {
        $this->container['last_miss'] = $last_miss;

        return $this;
    }

    /**
     * Gets expected_peer_id
     *
     * @return \IdeaEngine\TezosSDK\Model\CryptoBoxPublicKeyHash|null
     */
    public function getExpectedPeerId()
    {
        return $this->container['expected_peer_id'];
    }

    /**
     * Sets expected_peer_id
     *
     * @param \IdeaEngine\TezosSDK\Model\CryptoBoxPublicKeyHash|null $expected_peer_id expected_peer_id
     *
     * @return self
     */
    public function setExpectedPeerId($expected_peer_id)
    {
        $this->container['expected_peer_id'] = $expected_peer_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


