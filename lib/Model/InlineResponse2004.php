<?php
/**
 * InlineResponse2004
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  IdeaEngine\TezosSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Tezos RPC
 *
 * Tezos client RPC API.
 *
 * The version of the OpenAPI document: 11.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace IdeaEngine\TezosSDK\Model;

use \ArrayAccess;
use \IdeaEngine\TezosSDK\ObjectSerializer;

/**
 * InlineResponse2004 Class Doc Comment
 *
 * @category Class
 * @package  IdeaEngine\TezosSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse2004 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_4';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'data_dir' => 'OneOfUnistring',
        'disable_config_validation' => 'bool',
        'rpc' => '\IdeaEngine\TezosSDK\Model\InlineResponse2004Rpc',
        'p2p' => '\IdeaEngine\TezosSDK\Model\InlineResponse2004P2p',
        'log' => '\IdeaEngine\TezosSDK\Model\InlineResponse2004Log',
        'internal_events' => '\IdeaEngine\TezosSDK\Model\InlineResponse2004InternalEvents',
        'shell' => '\IdeaEngine\TezosSDK\Model\InlineResponse2004Shell',
        'network' => 'OneOfStringStringStringStringObject'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'data_dir' => null,
        'disable_config_validation' => null,
        'rpc' => null,
        'p2p' => null,
        'log' => null,
        'internal_events' => null,
        'shell' => null,
        'network' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'data_dir' => 'data-dir',
        'disable_config_validation' => 'disable-config-validation',
        'rpc' => 'rpc',
        'p2p' => 'p2p',
        'log' => 'log',
        'internal_events' => 'internal-events',
        'shell' => 'shell',
        'network' => 'network'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'data_dir' => 'setDataDir',
        'disable_config_validation' => 'setDisableConfigValidation',
        'rpc' => 'setRpc',
        'p2p' => 'setP2p',
        'log' => 'setLog',
        'internal_events' => 'setInternalEvents',
        'shell' => 'setShell',
        'network' => 'setNetwork'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'data_dir' => 'getDataDir',
        'disable_config_validation' => 'getDisableConfigValidation',
        'rpc' => 'getRpc',
        'p2p' => 'getP2p',
        'log' => 'getLog',
        'internal_events' => 'getInternalEvents',
        'shell' => 'getShell',
        'network' => 'getNetwork'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['data_dir'] = $data['data_dir'] ?? null;
        $this->container['disable_config_validation'] = $data['disable_config_validation'] ?? null;
        $this->container['rpc'] = $data['rpc'] ?? null;
        $this->container['p2p'] = $data['p2p'] ?? null;
        $this->container['log'] = $data['log'] ?? null;
        $this->container['internal_events'] = $data['internal_events'] ?? null;
        $this->container['shell'] = $data['shell'] ?? null;
        $this->container['network'] = $data['network'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets data_dir
     *
     * @return OneOfUnistring|null
     */
    public function getDataDir()
    {
        return $this->container['data_dir'];
    }

    /**
     * Sets data_dir
     *
     * @param OneOfUnistring|null $data_dir Location of the data dir on disk.
     *
     * @return self
     */
    public function setDataDir($data_dir)
    {
        $this->container['data_dir'] = $data_dir;

        return $this;
    }

    /**
     * Gets disable_config_validation
     *
     * @return bool|null
     */
    public function getDisableConfigValidation()
    {
        return $this->container['disable_config_validation'];
    }

    /**
     * Sets disable_config_validation
     *
     * @param bool|null $disable_config_validation Disable the node configuration validation.
     *
     * @return self
     */
    public function setDisableConfigValidation($disable_config_validation)
    {
        $this->container['disable_config_validation'] = $disable_config_validation;

        return $this;
    }

    /**
     * Gets rpc
     *
     * @return \IdeaEngine\TezosSDK\Model\InlineResponse2004Rpc|null
     */
    public function getRpc()
    {
        return $this->container['rpc'];
    }

    /**
     * Sets rpc
     *
     * @param \IdeaEngine\TezosSDK\Model\InlineResponse2004Rpc|null $rpc rpc
     *
     * @return self
     */
    public function setRpc($rpc)
    {
        $this->container['rpc'] = $rpc;

        return $this;
    }

    /**
     * Gets p2p
     *
     * @return \IdeaEngine\TezosSDK\Model\InlineResponse2004P2p|null
     */
    public function getP2p()
    {
        return $this->container['p2p'];
    }

    /**
     * Sets p2p
     *
     * @param \IdeaEngine\TezosSDK\Model\InlineResponse2004P2p|null $p2p p2p
     *
     * @return self
     */
    public function setP2p($p2p)
    {
        $this->container['p2p'] = $p2p;

        return $this;
    }

    /**
     * Gets log
     *
     * @return \IdeaEngine\TezosSDK\Model\InlineResponse2004Log|null
     */
    public function getLog()
    {
        return $this->container['log'];
    }

    /**
     * Sets log
     *
     * @param \IdeaEngine\TezosSDK\Model\InlineResponse2004Log|null $log log
     *
     * @return self
     */
    public function setLog($log)
    {
        $this->container['log'] = $log;

        return $this;
    }

    /**
     * Gets internal_events
     *
     * @return \IdeaEngine\TezosSDK\Model\InlineResponse2004InternalEvents|null
     */
    public function getInternalEvents()
    {
        return $this->container['internal_events'];
    }

    /**
     * Sets internal_events
     *
     * @param \IdeaEngine\TezosSDK\Model\InlineResponse2004InternalEvents|null $internal_events internal_events
     *
     * @return self
     */
    public function setInternalEvents($internal_events)
    {
        $this->container['internal_events'] = $internal_events;

        return $this;
    }

    /**
     * Gets shell
     *
     * @return \IdeaEngine\TezosSDK\Model\InlineResponse2004Shell|null
     */
    public function getShell()
    {
        return $this->container['shell'];
    }

    /**
     * Sets shell
     *
     * @param \IdeaEngine\TezosSDK\Model\InlineResponse2004Shell|null $shell shell
     *
     * @return self
     */
    public function setShell($shell)
    {
        $this->container['shell'] = $shell;

        return $this;
    }

    /**
     * Gets network
     *
     * @return OneOfStringStringStringStringObject|null
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param OneOfStringStringStringStringObject|null $network Configuration of which network/blockchain to connect to
     *
     * @return self
     */
    public function setNetwork($network)
    {
        $this->container['network'] = $network;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


