<?php
/**
 * BlockHeader1
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  IdeaEngine\TezosSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Tezos RPC
 *
 * Tezos client RPC API.
 *
 * The version of the OpenAPI document: 11.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace IdeaEngine\TezosSDK\Model;

use \ArrayAccess;
use \IdeaEngine\TezosSDK\ObjectSerializer;

/**
 * BlockHeader1 Class Doc Comment
 *
 * @category Class
 * @description Block header. It contains both shell and protocol specific data.
 * @package  IdeaEngine\TezosSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class BlockHeader1 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Block_header_1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'chain_id' => '\IdeaEngine\TezosSDK\Model\ChainId',
        'hash' => '\IdeaEngine\TezosSDK\Model\BlockHash',
        'level' => 'int',
        'proto' => 'int',
        'predecessor' => '\IdeaEngine\TezosSDK\Model\BlockHash',
        'timestamp' => '\IdeaEngine\TezosSDK\Model\TimestampProtocol',
        'validation_pass' => 'int',
        'operations_hash' => '\IdeaEngine\TezosSDK\Model\OperationListListHash',
        'fitness' => 'string[]',
        'context' => '\IdeaEngine\TezosSDK\Model\ContextHash',
        'protocol_data' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'chain_id' => null,
        'hash' => null,
        'level' => null,
        'proto' => null,
        'predecessor' => null,
        'timestamp' => null,
        'validation_pass' => null,
        'operations_hash' => null,
        'fitness' => null,
        'context' => null,
        'protocol_data' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'chain_id' => 'chain_id',
        'hash' => 'hash',
        'level' => 'level',
        'proto' => 'proto',
        'predecessor' => 'predecessor',
        'timestamp' => 'timestamp',
        'validation_pass' => 'validation_pass',
        'operations_hash' => 'operations_hash',
        'fitness' => 'fitness',
        'context' => 'context',
        'protocol_data' => 'protocol_data'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'chain_id' => 'setChainId',
        'hash' => 'setHash',
        'level' => 'setLevel',
        'proto' => 'setProto',
        'predecessor' => 'setPredecessor',
        'timestamp' => 'setTimestamp',
        'validation_pass' => 'setValidationPass',
        'operations_hash' => 'setOperationsHash',
        'fitness' => 'setFitness',
        'context' => 'setContext',
        'protocol_data' => 'setProtocolData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'chain_id' => 'getChainId',
        'hash' => 'getHash',
        'level' => 'getLevel',
        'proto' => 'getProto',
        'predecessor' => 'getPredecessor',
        'timestamp' => 'getTimestamp',
        'validation_pass' => 'getValidationPass',
        'operations_hash' => 'getOperationsHash',
        'fitness' => 'getFitness',
        'context' => 'getContext',
        'protocol_data' => 'getProtocolData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['chain_id'] = $data['chain_id'] ?? null;
        $this->container['hash'] = $data['hash'] ?? null;
        $this->container['level'] = $data['level'] ?? null;
        $this->container['proto'] = $data['proto'] ?? null;
        $this->container['predecessor'] = $data['predecessor'] ?? null;
        $this->container['timestamp'] = $data['timestamp'] ?? null;
        $this->container['validation_pass'] = $data['validation_pass'] ?? null;
        $this->container['operations_hash'] = $data['operations_hash'] ?? null;
        $this->container['fitness'] = $data['fitness'] ?? null;
        $this->container['context'] = $data['context'] ?? null;
        $this->container['protocol_data'] = $data['protocol_data'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['chain_id'] === null) {
            $invalidProperties[] = "'chain_id' can't be null";
        }
        if ($this->container['hash'] === null) {
            $invalidProperties[] = "'hash' can't be null";
        }
        if ($this->container['level'] === null) {
            $invalidProperties[] = "'level' can't be null";
        }
        if (($this->container['level'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'level', must be smaller than or equal to 2147483647.";
        }

        if (($this->container['level'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'level', must be bigger than or equal to -2147483648.";
        }

        if ($this->container['proto'] === null) {
            $invalidProperties[] = "'proto' can't be null";
        }
        if (($this->container['proto'] > 255)) {
            $invalidProperties[] = "invalid value for 'proto', must be smaller than or equal to 255.";
        }

        if (($this->container['proto'] < 0)) {
            $invalidProperties[] = "invalid value for 'proto', must be bigger than or equal to 0.";
        }

        if ($this->container['predecessor'] === null) {
            $invalidProperties[] = "'predecessor' can't be null";
        }
        if ($this->container['timestamp'] === null) {
            $invalidProperties[] = "'timestamp' can't be null";
        }
        if ($this->container['validation_pass'] === null) {
            $invalidProperties[] = "'validation_pass' can't be null";
        }
        if (($this->container['validation_pass'] > 255)) {
            $invalidProperties[] = "invalid value for 'validation_pass', must be smaller than or equal to 255.";
        }

        if (($this->container['validation_pass'] < 0)) {
            $invalidProperties[] = "invalid value for 'validation_pass', must be bigger than or equal to 0.";
        }

        if ($this->container['operations_hash'] === null) {
            $invalidProperties[] = "'operations_hash' can't be null";
        }
        if ($this->container['fitness'] === null) {
            $invalidProperties[] = "'fitness' can't be null";
        }
        if ($this->container['context'] === null) {
            $invalidProperties[] = "'context' can't be null";
        }
        if ($this->container['protocol_data'] === null) {
            $invalidProperties[] = "'protocol_data' can't be null";
        }
        if (!preg_match("/^([a-zA-Z0-9][a-zA-Z0-9])*$/", $this->container['protocol_data'])) {
            $invalidProperties[] = "invalid value for 'protocol_data', must be conform to the pattern /^([a-zA-Z0-9][a-zA-Z0-9])*$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets chain_id
     *
     * @return \IdeaEngine\TezosSDK\Model\ChainId
     */
    public function getChainId()
    {
        return $this->container['chain_id'];
    }

    /**
     * Sets chain_id
     *
     * @param \IdeaEngine\TezosSDK\Model\ChainId $chain_id chain_id
     *
     * @return self
     */
    public function setChainId($chain_id)
    {
        $this->container['chain_id'] = $chain_id;

        return $this;
    }

    /**
     * Gets hash
     *
     * @return \IdeaEngine\TezosSDK\Model\BlockHash
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param \IdeaEngine\TezosSDK\Model\BlockHash $hash hash
     *
     * @return self
     */
    public function setHash($hash)
    {
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets level
     *
     * @return int
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param int $level level
     *
     * @return self
     */
    public function setLevel($level)
    {

        if (($level > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $level when calling BlockHeader1., must be smaller than or equal to 2147483647.');
        }
        if (($level < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $level when calling BlockHeader1., must be bigger than or equal to -2147483648.');
        }

        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets proto
     *
     * @return int
     */
    public function getProto()
    {
        return $this->container['proto'];
    }

    /**
     * Sets proto
     *
     * @param int $proto proto
     *
     * @return self
     */
    public function setProto($proto)
    {

        if (($proto > 255)) {
            throw new \InvalidArgumentException('invalid value for $proto when calling BlockHeader1., must be smaller than or equal to 255.');
        }
        if (($proto < 0)) {
            throw new \InvalidArgumentException('invalid value for $proto when calling BlockHeader1., must be bigger than or equal to 0.');
        }

        $this->container['proto'] = $proto;

        return $this;
    }

    /**
     * Gets predecessor
     *
     * @return \IdeaEngine\TezosSDK\Model\BlockHash
     */
    public function getPredecessor()
    {
        return $this->container['predecessor'];
    }

    /**
     * Sets predecessor
     *
     * @param \IdeaEngine\TezosSDK\Model\BlockHash $predecessor predecessor
     *
     * @return self
     */
    public function setPredecessor($predecessor)
    {
        $this->container['predecessor'] = $predecessor;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \IdeaEngine\TezosSDK\Model\TimestampProtocol
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \IdeaEngine\TezosSDK\Model\TimestampProtocol $timestamp timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets validation_pass
     *
     * @return int
     */
    public function getValidationPass()
    {
        return $this->container['validation_pass'];
    }

    /**
     * Sets validation_pass
     *
     * @param int $validation_pass validation_pass
     *
     * @return self
     */
    public function setValidationPass($validation_pass)
    {

        if (($validation_pass > 255)) {
            throw new \InvalidArgumentException('invalid value for $validation_pass when calling BlockHeader1., must be smaller than or equal to 255.');
        }
        if (($validation_pass < 0)) {
            throw new \InvalidArgumentException('invalid value for $validation_pass when calling BlockHeader1., must be bigger than or equal to 0.');
        }

        $this->container['validation_pass'] = $validation_pass;

        return $this;
    }

    /**
     * Gets operations_hash
     *
     * @return \IdeaEngine\TezosSDK\Model\OperationListListHash
     */
    public function getOperationsHash()
    {
        return $this->container['operations_hash'];
    }

    /**
     * Sets operations_hash
     *
     * @param \IdeaEngine\TezosSDK\Model\OperationListListHash $operations_hash operations_hash
     *
     * @return self
     */
    public function setOperationsHash($operations_hash)
    {
        $this->container['operations_hash'] = $operations_hash;

        return $this;
    }

    /**
     * Gets fitness
     *
     * @return string[]
     */
    public function getFitness()
    {
        return $this->container['fitness'];
    }

    /**
     * Sets fitness
     *
     * @param string[] $fitness The fitness, or score, of a block, that allow the Tezos to decide which chain is the best. A fitness value is a list of byte sequences. They are compared as follows: shortest lists are smaller; lists of the same length are compared according to the lexicographical order.
     *
     * @return self
     */
    public function setFitness($fitness)
    {
        $this->container['fitness'] = $fitness;

        return $this;
    }

    /**
     * Gets context
     *
     * @return \IdeaEngine\TezosSDK\Model\ContextHash
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param \IdeaEngine\TezosSDK\Model\ContextHash $context context
     *
     * @return self
     */
    public function setContext($context)
    {
        $this->container['context'] = $context;

        return $this;
    }

    /**
     * Gets protocol_data
     *
     * @return string
     */
    public function getProtocolData()
    {
        return $this->container['protocol_data'];
    }

    /**
     * Sets protocol_data
     *
     * @param string $protocol_data protocol_data
     *
     * @return self
     */
    public function setProtocolData($protocol_data)
    {

        if ((!preg_match("/^([a-zA-Z0-9][a-zA-Z0-9])*$/", $protocol_data))) {
            throw new \InvalidArgumentException("invalid value for $protocol_data when calling BlockHeader1., must conform to the pattern /^([a-zA-Z0-9][a-zA-Z0-9])*$/.");
        }

        $this->container['protocol_data'] = $protocol_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


