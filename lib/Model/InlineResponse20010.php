<?php
/**
 * InlineResponse20010
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  IdeaEngine\TezosSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Tezos RPC
 *
 * Tezos client RPC API.
 *
 * The version of the OpenAPI document: 11.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace IdeaEngine\TezosSDK\Model;

use \ArrayAccess;
use \IdeaEngine\TezosSDK\ObjectSerializer;

/**
 * InlineResponse20010 Class Doc Comment
 *
 * @category Class
 * @package  IdeaEngine\TezosSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse20010 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_10';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'minor_words' => 'int',
        'promoted_words' => 'int',
        'major_words' => 'int',
        'minor_collections' => 'int',
        'major_collections' => 'int',
        'forced_major_collections' => 'int',
        'heap_words' => 'int',
        'heap_chunks' => 'int',
        'live_words' => 'int',
        'live_blocks' => 'int',
        'free_words' => 'int',
        'free_blocks' => 'int',
        'largest_free' => 'int',
        'fragments' => 'int',
        'compactions' => 'int',
        'top_heap_words' => 'int',
        'stack_size' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'minor_words' => null,
        'promoted_words' => null,
        'major_words' => null,
        'minor_collections' => null,
        'major_collections' => null,
        'forced_major_collections' => null,
        'heap_words' => null,
        'heap_chunks' => null,
        'live_words' => null,
        'live_blocks' => null,
        'free_words' => null,
        'free_blocks' => null,
        'largest_free' => null,
        'fragments' => null,
        'compactions' => null,
        'top_heap_words' => null,
        'stack_size' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'minor_words' => 'minor_words',
        'promoted_words' => 'promoted_words',
        'major_words' => 'major_words',
        'minor_collections' => 'minor_collections',
        'major_collections' => 'major_collections',
        'forced_major_collections' => 'forced_major_collections',
        'heap_words' => 'heap_words',
        'heap_chunks' => 'heap_chunks',
        'live_words' => 'live_words',
        'live_blocks' => 'live_blocks',
        'free_words' => 'free_words',
        'free_blocks' => 'free_blocks',
        'largest_free' => 'largest_free',
        'fragments' => 'fragments',
        'compactions' => 'compactions',
        'top_heap_words' => 'top_heap_words',
        'stack_size' => 'stack_size'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'minor_words' => 'setMinorWords',
        'promoted_words' => 'setPromotedWords',
        'major_words' => 'setMajorWords',
        'minor_collections' => 'setMinorCollections',
        'major_collections' => 'setMajorCollections',
        'forced_major_collections' => 'setForcedMajorCollections',
        'heap_words' => 'setHeapWords',
        'heap_chunks' => 'setHeapChunks',
        'live_words' => 'setLiveWords',
        'live_blocks' => 'setLiveBlocks',
        'free_words' => 'setFreeWords',
        'free_blocks' => 'setFreeBlocks',
        'largest_free' => 'setLargestFree',
        'fragments' => 'setFragments',
        'compactions' => 'setCompactions',
        'top_heap_words' => 'setTopHeapWords',
        'stack_size' => 'setStackSize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'minor_words' => 'getMinorWords',
        'promoted_words' => 'getPromotedWords',
        'major_words' => 'getMajorWords',
        'minor_collections' => 'getMinorCollections',
        'major_collections' => 'getMajorCollections',
        'forced_major_collections' => 'getForcedMajorCollections',
        'heap_words' => 'getHeapWords',
        'heap_chunks' => 'getHeapChunks',
        'live_words' => 'getLiveWords',
        'live_blocks' => 'getLiveBlocks',
        'free_words' => 'getFreeWords',
        'free_blocks' => 'getFreeBlocks',
        'largest_free' => 'getLargestFree',
        'fragments' => 'getFragments',
        'compactions' => 'getCompactions',
        'top_heap_words' => 'getTopHeapWords',
        'stack_size' => 'getStackSize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['minor_words'] = $data['minor_words'] ?? null;
        $this->container['promoted_words'] = $data['promoted_words'] ?? null;
        $this->container['major_words'] = $data['major_words'] ?? null;
        $this->container['minor_collections'] = $data['minor_collections'] ?? null;
        $this->container['major_collections'] = $data['major_collections'] ?? null;
        $this->container['forced_major_collections'] = $data['forced_major_collections'] ?? null;
        $this->container['heap_words'] = $data['heap_words'] ?? null;
        $this->container['heap_chunks'] = $data['heap_chunks'] ?? null;
        $this->container['live_words'] = $data['live_words'] ?? null;
        $this->container['live_blocks'] = $data['live_blocks'] ?? null;
        $this->container['free_words'] = $data['free_words'] ?? null;
        $this->container['free_blocks'] = $data['free_blocks'] ?? null;
        $this->container['largest_free'] = $data['largest_free'] ?? null;
        $this->container['fragments'] = $data['fragments'] ?? null;
        $this->container['compactions'] = $data['compactions'] ?? null;
        $this->container['top_heap_words'] = $data['top_heap_words'] ?? null;
        $this->container['stack_size'] = $data['stack_size'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['minor_words'] === null) {
            $invalidProperties[] = "'minor_words' can't be null";
        }
        if ($this->container['promoted_words'] === null) {
            $invalidProperties[] = "'promoted_words' can't be null";
        }
        if ($this->container['major_words'] === null) {
            $invalidProperties[] = "'major_words' can't be null";
        }
        if ($this->container['minor_collections'] === null) {
            $invalidProperties[] = "'minor_collections' can't be null";
        }
        if (($this->container['minor_collections'] > 1073741823)) {
            $invalidProperties[] = "invalid value for 'minor_collections', must be smaller than or equal to 1073741823.";
        }

        if (($this->container['minor_collections'] < -1073741824)) {
            $invalidProperties[] = "invalid value for 'minor_collections', must be bigger than or equal to -1073741824.";
        }

        if ($this->container['major_collections'] === null) {
            $invalidProperties[] = "'major_collections' can't be null";
        }
        if (($this->container['major_collections'] > 1073741823)) {
            $invalidProperties[] = "invalid value for 'major_collections', must be smaller than or equal to 1073741823.";
        }

        if (($this->container['major_collections'] < -1073741824)) {
            $invalidProperties[] = "invalid value for 'major_collections', must be bigger than or equal to -1073741824.";
        }

        if ($this->container['forced_major_collections'] === null) {
            $invalidProperties[] = "'forced_major_collections' can't be null";
        }
        if (($this->container['forced_major_collections'] > 1073741823)) {
            $invalidProperties[] = "invalid value for 'forced_major_collections', must be smaller than or equal to 1073741823.";
        }

        if (($this->container['forced_major_collections'] < -1073741824)) {
            $invalidProperties[] = "invalid value for 'forced_major_collections', must be bigger than or equal to -1073741824.";
        }

        if ($this->container['heap_words'] === null) {
            $invalidProperties[] = "'heap_words' can't be null";
        }
        if (($this->container['heap_words'] > 1073741823)) {
            $invalidProperties[] = "invalid value for 'heap_words', must be smaller than or equal to 1073741823.";
        }

        if (($this->container['heap_words'] < -1073741824)) {
            $invalidProperties[] = "invalid value for 'heap_words', must be bigger than or equal to -1073741824.";
        }

        if ($this->container['heap_chunks'] === null) {
            $invalidProperties[] = "'heap_chunks' can't be null";
        }
        if (($this->container['heap_chunks'] > 1073741823)) {
            $invalidProperties[] = "invalid value for 'heap_chunks', must be smaller than or equal to 1073741823.";
        }

        if (($this->container['heap_chunks'] < -1073741824)) {
            $invalidProperties[] = "invalid value for 'heap_chunks', must be bigger than or equal to -1073741824.";
        }

        if ($this->container['live_words'] === null) {
            $invalidProperties[] = "'live_words' can't be null";
        }
        if (($this->container['live_words'] > 1073741823)) {
            $invalidProperties[] = "invalid value for 'live_words', must be smaller than or equal to 1073741823.";
        }

        if (($this->container['live_words'] < -1073741824)) {
            $invalidProperties[] = "invalid value for 'live_words', must be bigger than or equal to -1073741824.";
        }

        if ($this->container['live_blocks'] === null) {
            $invalidProperties[] = "'live_blocks' can't be null";
        }
        if (($this->container['live_blocks'] > 1073741823)) {
            $invalidProperties[] = "invalid value for 'live_blocks', must be smaller than or equal to 1073741823.";
        }

        if (($this->container['live_blocks'] < -1073741824)) {
            $invalidProperties[] = "invalid value for 'live_blocks', must be bigger than or equal to -1073741824.";
        }

        if ($this->container['free_words'] === null) {
            $invalidProperties[] = "'free_words' can't be null";
        }
        if (($this->container['free_words'] > 1073741823)) {
            $invalidProperties[] = "invalid value for 'free_words', must be smaller than or equal to 1073741823.";
        }

        if (($this->container['free_words'] < -1073741824)) {
            $invalidProperties[] = "invalid value for 'free_words', must be bigger than or equal to -1073741824.";
        }

        if ($this->container['free_blocks'] === null) {
            $invalidProperties[] = "'free_blocks' can't be null";
        }
        if (($this->container['free_blocks'] > 1073741823)) {
            $invalidProperties[] = "invalid value for 'free_blocks', must be smaller than or equal to 1073741823.";
        }

        if (($this->container['free_blocks'] < -1073741824)) {
            $invalidProperties[] = "invalid value for 'free_blocks', must be bigger than or equal to -1073741824.";
        }

        if ($this->container['largest_free'] === null) {
            $invalidProperties[] = "'largest_free' can't be null";
        }
        if (($this->container['largest_free'] > 1073741823)) {
            $invalidProperties[] = "invalid value for 'largest_free', must be smaller than or equal to 1073741823.";
        }

        if (($this->container['largest_free'] < -1073741824)) {
            $invalidProperties[] = "invalid value for 'largest_free', must be bigger than or equal to -1073741824.";
        }

        if ($this->container['fragments'] === null) {
            $invalidProperties[] = "'fragments' can't be null";
        }
        if (($this->container['fragments'] > 1073741823)) {
            $invalidProperties[] = "invalid value for 'fragments', must be smaller than or equal to 1073741823.";
        }

        if (($this->container['fragments'] < -1073741824)) {
            $invalidProperties[] = "invalid value for 'fragments', must be bigger than or equal to -1073741824.";
        }

        if ($this->container['compactions'] === null) {
            $invalidProperties[] = "'compactions' can't be null";
        }
        if (($this->container['compactions'] > 1073741823)) {
            $invalidProperties[] = "invalid value for 'compactions', must be smaller than or equal to 1073741823.";
        }

        if (($this->container['compactions'] < -1073741824)) {
            $invalidProperties[] = "invalid value for 'compactions', must be bigger than or equal to -1073741824.";
        }

        if ($this->container['top_heap_words'] === null) {
            $invalidProperties[] = "'top_heap_words' can't be null";
        }
        if (($this->container['top_heap_words'] > 1073741823)) {
            $invalidProperties[] = "invalid value for 'top_heap_words', must be smaller than or equal to 1073741823.";
        }

        if (($this->container['top_heap_words'] < -1073741824)) {
            $invalidProperties[] = "invalid value for 'top_heap_words', must be bigger than or equal to -1073741824.";
        }

        if ($this->container['stack_size'] === null) {
            $invalidProperties[] = "'stack_size' can't be null";
        }
        if (($this->container['stack_size'] > 1073741823)) {
            $invalidProperties[] = "invalid value for 'stack_size', must be smaller than or equal to 1073741823.";
        }

        if (($this->container['stack_size'] < -1073741824)) {
            $invalidProperties[] = "invalid value for 'stack_size', must be bigger than or equal to -1073741824.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets minor_words
     *
     * @return int
     */
    public function getMinorWords()
    {
        return $this->container['minor_words'];
    }

    /**
     * Sets minor_words
     *
     * @param int $minor_words minor_words
     *
     * @return self
     */
    public function setMinorWords($minor_words)
    {
        $this->container['minor_words'] = $minor_words;

        return $this;
    }

    /**
     * Gets promoted_words
     *
     * @return int
     */
    public function getPromotedWords()
    {
        return $this->container['promoted_words'];
    }

    /**
     * Sets promoted_words
     *
     * @param int $promoted_words promoted_words
     *
     * @return self
     */
    public function setPromotedWords($promoted_words)
    {
        $this->container['promoted_words'] = $promoted_words;

        return $this;
    }

    /**
     * Gets major_words
     *
     * @return int
     */
    public function getMajorWords()
    {
        return $this->container['major_words'];
    }

    /**
     * Sets major_words
     *
     * @param int $major_words major_words
     *
     * @return self
     */
    public function setMajorWords($major_words)
    {
        $this->container['major_words'] = $major_words;

        return $this;
    }

    /**
     * Gets minor_collections
     *
     * @return int
     */
    public function getMinorCollections()
    {
        return $this->container['minor_collections'];
    }

    /**
     * Sets minor_collections
     *
     * @param int $minor_collections minor_collections
     *
     * @return self
     */
    public function setMinorCollections($minor_collections)
    {

        if (($minor_collections > 1073741823)) {
            throw new \InvalidArgumentException('invalid value for $minor_collections when calling InlineResponse20010., must be smaller than or equal to 1073741823.');
        }
        if (($minor_collections < -1073741824)) {
            throw new \InvalidArgumentException('invalid value for $minor_collections when calling InlineResponse20010., must be bigger than or equal to -1073741824.');
        }

        $this->container['minor_collections'] = $minor_collections;

        return $this;
    }

    /**
     * Gets major_collections
     *
     * @return int
     */
    public function getMajorCollections()
    {
        return $this->container['major_collections'];
    }

    /**
     * Sets major_collections
     *
     * @param int $major_collections major_collections
     *
     * @return self
     */
    public function setMajorCollections($major_collections)
    {

        if (($major_collections > 1073741823)) {
            throw new \InvalidArgumentException('invalid value for $major_collections when calling InlineResponse20010., must be smaller than or equal to 1073741823.');
        }
        if (($major_collections < -1073741824)) {
            throw new \InvalidArgumentException('invalid value for $major_collections when calling InlineResponse20010., must be bigger than or equal to -1073741824.');
        }

        $this->container['major_collections'] = $major_collections;

        return $this;
    }

    /**
     * Gets forced_major_collections
     *
     * @return int
     */
    public function getForcedMajorCollections()
    {
        return $this->container['forced_major_collections'];
    }

    /**
     * Sets forced_major_collections
     *
     * @param int $forced_major_collections forced_major_collections
     *
     * @return self
     */
    public function setForcedMajorCollections($forced_major_collections)
    {

        if (($forced_major_collections > 1073741823)) {
            throw new \InvalidArgumentException('invalid value for $forced_major_collections when calling InlineResponse20010., must be smaller than or equal to 1073741823.');
        }
        if (($forced_major_collections < -1073741824)) {
            throw new \InvalidArgumentException('invalid value for $forced_major_collections when calling InlineResponse20010., must be bigger than or equal to -1073741824.');
        }

        $this->container['forced_major_collections'] = $forced_major_collections;

        return $this;
    }

    /**
     * Gets heap_words
     *
     * @return int
     */
    public function getHeapWords()
    {
        return $this->container['heap_words'];
    }

    /**
     * Sets heap_words
     *
     * @param int $heap_words heap_words
     *
     * @return self
     */
    public function setHeapWords($heap_words)
    {

        if (($heap_words > 1073741823)) {
            throw new \InvalidArgumentException('invalid value for $heap_words when calling InlineResponse20010., must be smaller than or equal to 1073741823.');
        }
        if (($heap_words < -1073741824)) {
            throw new \InvalidArgumentException('invalid value for $heap_words when calling InlineResponse20010., must be bigger than or equal to -1073741824.');
        }

        $this->container['heap_words'] = $heap_words;

        return $this;
    }

    /**
     * Gets heap_chunks
     *
     * @return int
     */
    public function getHeapChunks()
    {
        return $this->container['heap_chunks'];
    }

    /**
     * Sets heap_chunks
     *
     * @param int $heap_chunks heap_chunks
     *
     * @return self
     */
    public function setHeapChunks($heap_chunks)
    {

        if (($heap_chunks > 1073741823)) {
            throw new \InvalidArgumentException('invalid value for $heap_chunks when calling InlineResponse20010., must be smaller than or equal to 1073741823.');
        }
        if (($heap_chunks < -1073741824)) {
            throw new \InvalidArgumentException('invalid value for $heap_chunks when calling InlineResponse20010., must be bigger than or equal to -1073741824.');
        }

        $this->container['heap_chunks'] = $heap_chunks;

        return $this;
    }

    /**
     * Gets live_words
     *
     * @return int
     */
    public function getLiveWords()
    {
        return $this->container['live_words'];
    }

    /**
     * Sets live_words
     *
     * @param int $live_words live_words
     *
     * @return self
     */
    public function setLiveWords($live_words)
    {

        if (($live_words > 1073741823)) {
            throw new \InvalidArgumentException('invalid value for $live_words when calling InlineResponse20010., must be smaller than or equal to 1073741823.');
        }
        if (($live_words < -1073741824)) {
            throw new \InvalidArgumentException('invalid value for $live_words when calling InlineResponse20010., must be bigger than or equal to -1073741824.');
        }

        $this->container['live_words'] = $live_words;

        return $this;
    }

    /**
     * Gets live_blocks
     *
     * @return int
     */
    public function getLiveBlocks()
    {
        return $this->container['live_blocks'];
    }

    /**
     * Sets live_blocks
     *
     * @param int $live_blocks live_blocks
     *
     * @return self
     */
    public function setLiveBlocks($live_blocks)
    {

        if (($live_blocks > 1073741823)) {
            throw new \InvalidArgumentException('invalid value for $live_blocks when calling InlineResponse20010., must be smaller than or equal to 1073741823.');
        }
        if (($live_blocks < -1073741824)) {
            throw new \InvalidArgumentException('invalid value for $live_blocks when calling InlineResponse20010., must be bigger than or equal to -1073741824.');
        }

        $this->container['live_blocks'] = $live_blocks;

        return $this;
    }

    /**
     * Gets free_words
     *
     * @return int
     */
    public function getFreeWords()
    {
        return $this->container['free_words'];
    }

    /**
     * Sets free_words
     *
     * @param int $free_words free_words
     *
     * @return self
     */
    public function setFreeWords($free_words)
    {

        if (($free_words > 1073741823)) {
            throw new \InvalidArgumentException('invalid value for $free_words when calling InlineResponse20010., must be smaller than or equal to 1073741823.');
        }
        if (($free_words < -1073741824)) {
            throw new \InvalidArgumentException('invalid value for $free_words when calling InlineResponse20010., must be bigger than or equal to -1073741824.');
        }

        $this->container['free_words'] = $free_words;

        return $this;
    }

    /**
     * Gets free_blocks
     *
     * @return int
     */
    public function getFreeBlocks()
    {
        return $this->container['free_blocks'];
    }

    /**
     * Sets free_blocks
     *
     * @param int $free_blocks free_blocks
     *
     * @return self
     */
    public function setFreeBlocks($free_blocks)
    {

        if (($free_blocks > 1073741823)) {
            throw new \InvalidArgumentException('invalid value for $free_blocks when calling InlineResponse20010., must be smaller than or equal to 1073741823.');
        }
        if (($free_blocks < -1073741824)) {
            throw new \InvalidArgumentException('invalid value for $free_blocks when calling InlineResponse20010., must be bigger than or equal to -1073741824.');
        }

        $this->container['free_blocks'] = $free_blocks;

        return $this;
    }

    /**
     * Gets largest_free
     *
     * @return int
     */
    public function getLargestFree()
    {
        return $this->container['largest_free'];
    }

    /**
     * Sets largest_free
     *
     * @param int $largest_free largest_free
     *
     * @return self
     */
    public function setLargestFree($largest_free)
    {

        if (($largest_free > 1073741823)) {
            throw new \InvalidArgumentException('invalid value for $largest_free when calling InlineResponse20010., must be smaller than or equal to 1073741823.');
        }
        if (($largest_free < -1073741824)) {
            throw new \InvalidArgumentException('invalid value for $largest_free when calling InlineResponse20010., must be bigger than or equal to -1073741824.');
        }

        $this->container['largest_free'] = $largest_free;

        return $this;
    }

    /**
     * Gets fragments
     *
     * @return int
     */
    public function getFragments()
    {
        return $this->container['fragments'];
    }

    /**
     * Sets fragments
     *
     * @param int $fragments fragments
     *
     * @return self
     */
    public function setFragments($fragments)
    {

        if (($fragments > 1073741823)) {
            throw new \InvalidArgumentException('invalid value for $fragments when calling InlineResponse20010., must be smaller than or equal to 1073741823.');
        }
        if (($fragments < -1073741824)) {
            throw new \InvalidArgumentException('invalid value for $fragments when calling InlineResponse20010., must be bigger than or equal to -1073741824.');
        }

        $this->container['fragments'] = $fragments;

        return $this;
    }

    /**
     * Gets compactions
     *
     * @return int
     */
    public function getCompactions()
    {
        return $this->container['compactions'];
    }

    /**
     * Sets compactions
     *
     * @param int $compactions compactions
     *
     * @return self
     */
    public function setCompactions($compactions)
    {

        if (($compactions > 1073741823)) {
            throw new \InvalidArgumentException('invalid value for $compactions when calling InlineResponse20010., must be smaller than or equal to 1073741823.');
        }
        if (($compactions < -1073741824)) {
            throw new \InvalidArgumentException('invalid value for $compactions when calling InlineResponse20010., must be bigger than or equal to -1073741824.');
        }

        $this->container['compactions'] = $compactions;

        return $this;
    }

    /**
     * Gets top_heap_words
     *
     * @return int
     */
    public function getTopHeapWords()
    {
        return $this->container['top_heap_words'];
    }

    /**
     * Sets top_heap_words
     *
     * @param int $top_heap_words top_heap_words
     *
     * @return self
     */
    public function setTopHeapWords($top_heap_words)
    {

        if (($top_heap_words > 1073741823)) {
            throw new \InvalidArgumentException('invalid value for $top_heap_words when calling InlineResponse20010., must be smaller than or equal to 1073741823.');
        }
        if (($top_heap_words < -1073741824)) {
            throw new \InvalidArgumentException('invalid value for $top_heap_words when calling InlineResponse20010., must be bigger than or equal to -1073741824.');
        }

        $this->container['top_heap_words'] = $top_heap_words;

        return $this;
    }

    /**
     * Gets stack_size
     *
     * @return int
     */
    public function getStackSize()
    {
        return $this->container['stack_size'];
    }

    /**
     * Sets stack_size
     *
     * @param int $stack_size stack_size
     *
     * @return self
     */
    public function setStackSize($stack_size)
    {

        if (($stack_size > 1073741823)) {
            throw new \InvalidArgumentException('invalid value for $stack_size when calling InlineResponse20010., must be smaller than or equal to 1073741823.');
        }
        if (($stack_size < -1073741824)) {
            throw new \InvalidArgumentException('invalid value for $stack_size when calling InlineResponse20010., must be bigger than or equal to -1073741824.');
        }

        $this->container['stack_size'] = $stack_size;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


